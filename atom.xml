<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LotteWong</title>
  
  <subtitle>在代码符号表象中避难。</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-06-18T06:40:44.636Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LotteWong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(1) 需求分析</title>
    <link href="http://yoursite.com/2021/06/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/"/>
    <id>http://yoursite.com/2021/06/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/</id>
    <published>2021-05-31T23:00:21.000Z</published>
    <updated>2021-06-18T06:40:44.636Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>需求分析</strong>，分为<strong>两个</strong>方面：</p><ul><li>功能性需求分析 - <strong>用例图和用例表</strong></li><li>非功能性需求分析</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="功能性需求分析"><a href="#功能性需求分析" class="headerlink" title="功能性需求分析"></a><strong>功能性需求分析</strong></h2><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h3><h4 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h4><ul><li><u>用例图</u>一般由<strong>参与者、用例、系统边界和关系</strong>构成。</li></ul><table><thead><tr><th align="center">关系类型</th><th>元素</th><th align="center">说明</th><th align="center">条件性</th><th align="center">直接性</th><th align="center">箭头指向</th></tr></thead><tbody><tr><td align="center">关联</td><td>参与者与用例之间的关系</td><td align="center">参与者和用例通信</td><td align="center">-</td><td align="center">-</td><td align="center">发送方指向接受方</td></tr><tr><td align="center">泛化</td><td>参与者之间或用例之间的关系</td><td align="center">子元素继承父元素</td><td align="center">无</td><td align="center">直接</td><td align="center">子元素指向父元素</td></tr><tr><td align="center">包含</td><td>用例之间的关系</td><td align="center">复杂用例拆成简单用例</td><td align="center">无</td><td align="center">间接</td><td align="center">复杂用例指向简单用例</td></tr><tr><td align="center">扩展</td><td>用例之间的关系</td><td align="center">基础用例增加附加用例</td><td align="center">有</td><td align="center">直接</td><td align="center">基础用例指向附加用例</td></tr></tbody></table><h4 id="用例表"><a href="#用例表" class="headerlink" title="用例表"></a>用例表</h4><ul><li><u>用例表</u>一般由<strong>用例编号、用例名称、参与者、用例描述、前置条件、后置条件、正常流程和异常流程</strong>构成。</li></ul><table><thead><tr><th align="center">条目</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">用例编号</td><td align="center">[数字]</td></tr><tr><td align="center">用例名称</td><td align="center">[动宾结构]</td></tr><tr><td align="center">参与者</td><td align="center">[主语]</td></tr><tr><td align="center">用例描述</td><td align="center">[相互独立；可以观测]</td></tr><tr><td align="center">前置条件</td><td align="center">[分点说明]</td></tr><tr><td align="center">后置条件</td><td align="center">[分点说明]</td></tr><tr><td align="center">正常流程</td><td align="center">[正常操作→正常结果]</td></tr><tr><td align="center">异常流程</td><td align="center">[异常操作→异常结果]</td></tr></tbody></table><h3 id="实践应用"><a href="#实践应用" class="headerlink" title="实践应用"></a>实践应用</h3><ul><li>下图为<u>微服务API网关管理模块的用例图</u>，其展示了在管理模块中，管理员用户作为参与者与用例之间的关系以及主用例和子用例之间的关系。根据分析，管理模块共有6个主要的用例，分别为<strong>用户登录、用户登出、管理用户、管理服务、管理应用和数据统计</strong>。</li></ul><p><img src="/images/admin_use_case.png" alt="微服务API网关管理模块用例图"></p><ul><li>下图为<u>微服务API网关核心模块的用例图</u>，其展示了在核心模块中，普通用户作为参与者与用例之间的关系以及主用例和子用例之间的关系。根据分析，核心模块共有7个主要的用例，分别为<strong>协议接入、权限认证、流量统计、流量控制、请求重写、负载均衡和反向代理</strong>。</li></ul><p><img src="/images/core_use_case.png" alt="微服务API网关核心模块用例图"></p><h2 id="非功能性需求分析"><a href="#非功能性需求分析" class="headerlink" title="非功能性需求分析"></a><strong>非功能性需求分析</strong></h2><hr><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li><strong>对于用户操作而言</strong>：应用口令安全要求和会话超时机制</li><li><strong>对于请求访问而言</strong>：设置 <code>JWT</code> 校验和 <code>IP</code> 校验</li><li><strong>对于数据传输而言</strong>：启动 <code>HTTPS</code> 监听</li><li><strong>对于数据保存而言</strong>：敏感信息使用盐值加密并以密文方式入库</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ul><li>选用性能表现优秀、功能支持齐全的框架 <code>Gin</code></li><li>先访问缓存 <code>Redis</code> 代替直接访问数据库 <code>MySQL</code></li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ul><li><strong>故障时仍稳定服务</strong>：进行多实例部署，周期探活并故障重启</li><li><strong>容易横向扩展实例</strong>：弹性伸缩，负载均衡</li></ul><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ul><li>统一的 <code>RESTful API</code> 接口</li><li>直观的 <code>Vue-Element-Admin</code> 界面 </li></ul><h2 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a><strong>FAQs</strong></h2><blockquote><p><strong>Q：</strong>如何控制用例的粒度呢？</p><p><strong>A：</strong>参考<a href="https://www.cnblogs.com/HeroBeast/archive/2009/09/27/1575094.html" target="_blank" rel="noopener">用例的类型与粒度</a></p></blockquote><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a><strong>Refs</strong></h2><ul><li><a href="https://www.cnblogs.com/Yogurshine/archive/2013/01/14/2859248.html" target="_blank" rel="noopener">UML系列-用例图</a></li><li><a href="https://www.jianshu.com/p/7ff70e28bb72" target="_blank" rel="noopener">谈谈需求的描述-用例</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;需求分析&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性需求分析 - &lt;strong&gt;用例图和用例表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;非功能性需求分析&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Kubernetes# QCloud上的Kubernetes初体验</title>
    <link href="http://yoursite.com/2021/05/21/QCloud%E4%B8%8A%E7%9A%84Kubernetes%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2021/05/21/QCloud%E4%B8%8A%E7%9A%84Kubernetes%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-05-20T23:00:21.000Z</published>
    <updated>2021-05-25T08:26:02.835Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>QCloud</strong>上利用<strong>Kubernetes</strong>编排应用与服务，主要分为以下<strong>四个部分</strong>：</p><ul><li><strong>环境准备 Environment</strong></li><li><strong>疑难解决 FAQ</strong></li><li>具体案例 Cases</li><li>参考文献 References</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="环境准备-Environment"><a href="#环境准备-Environment" class="headerlink" title="环境准备 Environment"></a><strong>环境准备 Environment</strong></h2><h3 id="更新系统源和软件包"><a href="#更新系统源和软件包" class="headerlink" title="更新系统源和软件包"></a>更新系统源和软件包</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="修改Docker配置"><a href="#修改Docker配置" class="headerlink" title="修改Docker配置"></a>修改Docker配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 编辑docker配置</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"exe-opts"</span>: [<span class="hljs-string">"native.cgroupdriver=systemd"</span>], <span class="hljs-comment"># 修改cgroup driver选项，使docker和k8s一致</span></span><br><span class="line">  <span class="hljs-string">"registry-mirrors"</span>: [<span class="hljs-string">"https://registry.docker-cn.com"</span>] <span class="hljs-comment"># 替换成国内镜像源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启docker服务</span></span><br><span class="line">service docker restart 或 systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装Kubernetes工具"><a href="#安装Kubernetes工具" class="headerlink" title="安装Kubernetes工具"></a>安装Kubernetes工具</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装依赖工具</span></span><br><span class="line">apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 获取阿里云镜像源密钥</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main"</span> &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 安装k8s工具</span></span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="下载Kubernetes镜像"><a href="#下载Kubernetes镜像" class="headerlink" title="下载Kubernetes镜像"></a>下载Kubernetes镜像</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 编辑下载镜像文件</span></span><br><span class="line">vim pull_k8s_images.sh</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从国内镜像源中下载镜像并替换标签</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  `kubeadm config images list`;  <span class="hljs-keyword">do</span></span><br><span class="line">    imageName=<span class="hljs-variable">$&#123;i#k8s.gcr.io/&#125;</span></span><br><span class="line">    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$imageName</span> != <span class="hljs-string">"coredns/coredns:v1.8.0"</span> ]</span><br><span class="line">    <span class="hljs-keyword">then</span></span><br><span class="line">        docker pull registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker tag registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span> k8s.gcr.io/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker rmi registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        docker pull coredns/coredns:1.8.0</span><br><span class="line">        docker tag coredns/coredns:1.8.0 k8s.gcr.io/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker rmi coredns/coredns:1.8.0</span><br><span class="line">    <span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span>;</span><br></pre></td></tr></table></figure><h3 id="初始化Kubernetes主节点"><a href="#初始化Kubernetes主节点" class="headerlink" title="初始化Kubernetes主节点"></a>初始化Kubernetes主节点</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 <span class="hljs-comment"># 设置网络信息</span></span><br><span class="line">--ignore-preflight-errors=NumCPU <span class="hljs-comment"># 允许单核运行</span></span><br></pre></td></tr></table></figure><h3 id="应用Kubernetes配置"><a href="#应用Kubernetes配置" class="headerlink" title="应用Kubernetes配置"></a>应用Kubernetes配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><h3 id="下载Kubernetes网络插件"><a href="#下载Kubernetes网络插件" class="headerlink" title="下载Kubernetes网络插件"></a>下载Kubernetes网络插件</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="允许主节点部署"><a href="#允许主节点部署" class="headerlink" title="允许主节点部署"></a>允许主节点部署</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="允许命令行补全"><a href="#允许命令行补全" class="headerlink" title="允许命令行补全"></a>允许命令行补全</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install bash-completion</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="查看是否部署成功"><a href="#查看是否部署成功" class="headerlink" title="查看是否部署成功"></a>查看是否部署成功</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="疑难解决-FAQ"><a href="#疑难解决-FAQ" class="headerlink" title="疑难解决 FAQ"></a><strong>疑难解决 FAQ</strong></h2><h3 id="Docker重启服务出现异常"><a href="#Docker重启服务出现异常" class="headerlink" title="Docker重启服务出现异常"></a>Docker重启服务出现异常</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看日志定位原因</span></span><br><span class="line">service docker status 或 systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 是因为/var/run/docker.sock出错了</span></span><br><span class="line">level=fatal msg=<span class="hljs-string">"can't create unix socket /var/run/docker.sock: is a directory"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 删除/var/run/docker.sock文件</span></span><br><span class="line">rm -rf /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启docker服务</span></span><br><span class="line">service docker restart 或 systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Kubernetes忘记加入集群命令"><a href="#Kubernetes忘记加入集群命令" class="headerlink" title="Kubernetes忘记加入集群命令"></a>Kubernetes忘记加入集群命令</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 提示的命令</span></span><br><span class="line">kubeadm join <span class="hljs-variable">$&#123;ip&#125;</span> --token <span class="hljs-variable">$&#123;token&#125;</span> --discovery-token-ca-cert-hash <span class="hljs-variable">$&#123;discovery-token-ca-cert-hash&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 找回的命令</span></span><br><span class="line">kubeadm token create --<span class="hljs-built_in">print</span>-join-command</span><br></pre></td></tr></table></figure><h3 id="x509-certificate-signed-by-unknown-authority"><a href="#x509-certificate-signed-by-unknown-authority" class="headerlink" title="x509: certificate signed by unknown authority"></a>x509: certificate signed by unknown authority</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 重装后.kube/config变化了，重新应用配置</span></span><br><span class="line">mkdir -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><h3 id="Docker容器连接本机MySQL-Redis"><a href="#Docker容器连接本机MySQL-Redis" class="headerlink" title="Docker容器连接本机MySQL/Redis"></a>Docker容器连接本机MySQL/Redis</h3><h4 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看docker容器网络模式</span></span><br><span class="line">docker inspect <span class="hljs-variable">$&#123;container_id&#125;</span> | grep -i <span class="hljs-string">"network"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 默认为bridge的模式</span></span><br><span class="line"><span class="hljs-string">"NetworkMode"</span>: <span class="hljs-string">"bridge"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 此时localhost仅仅指的是容器自身地址，应使用主机的内网地址</span></span><br></pre></td></tr></table></figure><h4 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 以host的模式启动docker容器</span></span><br><span class="line">docker run -d --network=host <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 此时localhost同时代表了容器和主机的地址</span></span><br></pre></td></tr></table></figure><h3 id="Xshell外网远程访问MySQL-Redis"><a href="#Xshell外网远程访问MySQL-Redis" class="headerlink" title="Xshell外网远程访问MySQL/Redis"></a>Xshell外网远程访问MySQL/Redis</h3><h4 id="修改-MySQL-Redis-配置"><a href="#修改-MySQL-Redis-配置" class="headerlink" title="修改 MySQL/Redis 配置"></a>修改 MySQL/Redis 配置</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 编辑mysql配置</span></span><br><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 监听所有网段</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="hljs-built_in">bind</span>-address=0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 修改远程登录权限</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">'%'</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启mysql服务使其重新生效</span></span><br><span class="line">mysqld --defaults-file=/etc/mysql/my.cnf</span><br><span class="line">service mysql restart 或 systemctl restart mysql</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 编辑redis配置</span></span><br><span class="line">vim /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 监听所有网段</span></span><br><span class="line"><span class="hljs-built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启redis-server服务使其重新生效</span></span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">service redis-server restart 或 systemctl restart redis-server</span><br></pre></td></tr></table></figure><h4 id="修改腾讯云服务器安全组规则"><a href="#修改腾讯云服务器安全组规则" class="headerlink" title="修改腾讯云服务器安全组规则"></a>修改腾讯云服务器安全组规则</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 允许所有网段访问3306和6379这两个端口</span></span><br><span class="line">0.0.0.0/0 TCP:3306,6379 Allow <span class="hljs-comment"># ipv4放行</span></span><br><span class="line">::/0 TCP:3306,6379 Allow <span class="hljs-comment"># ipv6放行</span></span><br></pre></td></tr></table></figure><h2 id="具体案例-Cases"><a href="#具体案例-Cases" class="headerlink" title="具体案例 Cases"></a><strong>具体案例 Cases</strong></h2><h3 id="交叉编译与镜像构建"><a href="#交叉编译与镜像构建" class="headerlink" title="交叉编译与镜像构建"></a>交叉编译与镜像构建</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># set go env</span></span><br><span class="line"><span class="hljs-built_in">export</span> GO111MODULE=auto</span><br><span class="line"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io,direct</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># build binary executable</span></span><br><span class="line">mkdir -p ./bin</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o ./bin/giotto_gateway_core</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Dockerfile</span></span><br><span class="line">FROM golang</span><br><span class="line">MAINTAINER LotteWong &lt;lottewong21@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /go/src/app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">CMD ./bin/giotto_gateway_core -config ./configs/prod/</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># docker build</span></span><br><span class="line">commit=`git rev-parse --short HEAD`</span><br><span class="line">docker build -f ./ci/docker/Dockerfile -t giotto-gateway-core:<span class="hljs-variable">$commit</span> .</span><br></pre></td></tr></table></figure><h3 id="容器部署与容器编排"><a href="#容器部署与容器编排" class="headerlink" title="容器部署与容器编排"></a>容器部署与容器编排</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># deploy config</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: giotto-gateway-core</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: giotto-gateway-core</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: giotto-gateway-core</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: giotto-gateway-core</span><br><span class="line">          image: giotto-gateway-core:d1785da</span><br><span class="line">          imagePullPolicy: Never</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">---</span><br><span class="line"><span class="hljs-comment"># service config</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: giotto-gateway-core</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      name: <span class="hljs-string">"http-proxy"</span></span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">      nodePort: 30080</span><br><span class="line">    - port: 443</span><br><span class="line">      name: <span class="hljs-string">"https-proxy"</span></span><br><span class="line">      targetPort: 443</span><br><span class="line">      protocol: TCP</span><br><span class="line">      nodePort: 30443</span><br><span class="line">  <span class="hljs-built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    name: giotto-gateway-core</span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment"># kubectl create</span></span><br><span class="line">kubectl create -f ./ci/k8s/core.yaml</span><br></pre></td></tr></table></figure><h2 id="参考资料-References"><a href="#参考资料-References" class="headerlink" title="参考资料 References"></a><strong>参考资料 References</strong></h2><ol><li><a href="https://cloud.tencent.com/developer/article/1817826" target="_blank" rel="noopener">在 Ubuntu 上安装 K8S 教程</a></li><li><a href="https://my.oschina.net/u/4409146/blog/3306898" target="_blank" rel="noopener">ubuntu k8s 单节点快速安装</a></li><li><a href="https://blog.csdn.net/u012891504/article/details/52857682" target="_blank" rel="noopener">docker服务启动失败</a></li><li><a href="https://blog.csdn.net/weixin_44130081/article/details/103563392" target="_blank" rel="noopener">K8S在kubeadm init以后查询kubeadm join</a></li><li><a href="https://stackoverflow.com/questions/36939381/x509-certificate-signed-by-unknown-authority-kubernetes" target="_blank" rel="noopener">x509 certificate signed by unknown authority- Kubernetes</a></li><li><a href="https://blog.csdn.net/suchahaerkang/article/details/84570488" target="_blank" rel="noopener">Docker的四种网络模式Bridge模式</a></li><li><a href="https://cloud.tencent.com/developer/article/1153843" target="_blank" rel="noopener">mysql 远程连接数据库的二种方法</a></li><li><a href="https://blog.csdn.net/Light_Breeze/article/details/82070222" target="_blank" rel="noopener">解决mysql不用密码也能登录</a></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;strong&gt;QCloud&lt;/strong&gt;上利用&lt;strong&gt;Kubernetes&lt;/strong&gt;编排应用与服务，主要分为以下&lt;strong&gt;四个部分&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境准备 Environment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;疑难解决 FAQ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;具体案例 Cases&lt;/li&gt;
&lt;li&gt;参考文献 References&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="DevOps" scheme="http://yoursite.com/categories/DevOps/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《恒丰银行分布式核心系统 - API 网关 技术原型落地实践》笔记</title>
    <link href="http://yoursite.com/2021/04/07/%E6%81%92%E4%B8%B0%E9%93%B6%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F%20-%20API%20%E7%BD%91%E5%85%B3%E6%8A%80%E6%9C%AF%E5%8E%9F%E5%9E%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2021/04/07/%E6%81%92%E4%B8%B0%E9%93%B6%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F%20-%20API%20%E7%BD%91%E5%85%B3%E6%8A%80%E6%9C%AF%E5%8E%9F%E5%9E%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-04-06T23:00:21.000Z</published>
    <updated>2021-04-23T08:10:23.669Z</updated>
    
    <content type="html"><![CDATA[<p><em>赵毅,张涛.恒丰银行分布式核心系统-API网关技术原型落地实践[J].中国金融电脑,2017(04):48-55.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><p><img src="/images/paper_xmind_5.png" alt="paper mindmap"></p><p>阅读本论文后，<strong>主要讨论以下两点</strong>：</p><ol><li>恒丰银行 API 网关技术架构</li><li>恒丰银行 API 网关设计亮点</li></ol><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a><strong>技术架构</strong></h2><p><img src="/images/paper_arch_5.png" alt="paper overall architecture"></p><p><img src="/images/paper_arch_6.png" alt="paper internal architecture"></p><ul><li><strong>Java SPI</strong>：实际是“基于接口的编程＋策略模式＋配置文件”的动态加载机制。</li><li><strong>Filter-PRPE</strong>：模型为 “PRE -&gt; ROUTING -&gt; POST -&gt; ERROR” 的责任链机制。</li></ul><p><img src="/images/config_data_structure.png" alt="config data structure design"></p><ul><li><strong>File System</strong>：提供了网关启动所需的环境配置信息，包括注册中心连接和参数配置、外部依赖连接和参数配置以及默认的基础规则配置。其中默认的基础规则配置可被动态地替换。</li><li><strong>Zookeeper</strong>：在提供服务注册与服务发现的能力之余，对配置进行持久化和订阅通知。</li></ul><blockquote><p><em>注：Zookeeper 替代了传统的数据库直接存储配置（MySQL 和 MongoDB 不再是必需的），Zookeeper 自带的消息订阅功能也解决了热更新问题（Redis 和 RabbitMQ 不再是必需的），为了提高运行效率数据将缓存在内存，这些都是非常具有参考价值的做法。同时，本文也提出了动态覆盖本地设置的新思路。</em></p></blockquote><h2 id="设计亮点"><a href="#设计亮点" class="headerlink" title="设计亮点"></a><strong>设计亮点</strong></h2><h3 id="多维度动态路由机制"><a href="#多维度动态路由机制" class="headerlink" title="多维度动态路由机制"></a>多维度动态路由机制</h3><p><img src="/images/route_rule_model.png" alt="route rule model"></p><p><img src="/images/multi-dimension_route_mechanism.png" alt="multi-dimension route mechanism"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了一种基于 Java SPI + Filter PRPE 实现的微服务 API 网关的<strong>架构</strong>，在服务/配置数据动态管理和多维度动态路由机制这两个方面为毕设工作提供了宝贵的参考。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;赵毅,张涛.恒丰银行分布式核心系统-API网关技术原型落地实践[J].中国金融电脑,2017(04):48-55.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《微服务API网关的设计及应用》笔记</title>
    <link href="http://yoursite.com/2021/04/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2021/04/06/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8F%8A%E5%BA%94%E7%94%A8/</id>
    <published>2021-04-05T23:00:21.000Z</published>
    <updated>2021-04-22T13:46:32.754Z</updated>
    
    <content type="html"><![CDATA[<p><em>廖俊杰,陶智勇.微服务API网关的设计及应用[J].自动化技术与应用,2019,38(08):85-88.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><p><img src="/images/paper_xmind_4.png" alt="paper mindmap"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了一种基于 Spring Cloud Zuul 实现的微服务 API 网关的<strong>应用</strong>，侧重关注基于 Zuul 的实践使用而不是基于 Zuul 的二次设计，在技术栈的使用上也存在不同，故对毕设工作的帮助较少。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;廖俊杰,陶智勇.微服务API网关的设计及应用[J].自动化技术与应用,2019,38(08):85-88.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《基于 OpenResty 平台的 API 网关系统的设计与实现》笔记</title>
    <link href="http://yoursite.com/2021/04/05/%E5%9F%BA%E4%BA%8E%20OpenResty%20%E5%B9%B3%E5%8F%B0%E7%9A%84%20API%20%E7%BD%91%E5%85%B3%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/04/05/%E5%9F%BA%E4%BA%8E%20OpenResty%20%E5%B9%B3%E5%8F%B0%E7%9A%84%20API%20%E7%BD%91%E5%85%B3%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-04-04T23:00:21.000Z</published>
    <updated>2021-04-22T13:59:52.669Z</updated>
    
    <content type="html"><![CDATA[<p><em>温馨,樊婧雯,王富强.基于OpenResty平台的API网关系统的设计与实现[J].信息化研究,2020,46(03):62-68.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><p><img src="/images/paper_xmind_3.png" alt="paper mindmap"></p><p>阅读本论文后，<strong>主要讨论以下两点</strong>：</p><ol><li>API 网关设计</li><li>API 网关实现</li></ol><h2 id="API-网关设计"><a href="#API-网关设计" class="headerlink" title="API 网关设计"></a><strong>API 网关设计</strong></h2><p><img src="/images/paper_arch_4.png" alt="paper architecture"></p><h3 id="API网关软件"><a href="#API网关软件" class="headerlink" title="API网关软件"></a>API网关软件</h3><ul><li><strong>读多</strong>，实现安全认证、流量控制、请求重写、反向代理、负载均衡和结果缓存等功能。</li></ul><h3 id="API网关监控管理中心"><a href="#API网关监控管理中心" class="headerlink" title="API网关监控管理中心"></a>API网关监控管理中心</h3><ul><li><strong>写多</strong>，实现服务配置、日志管理、系统监控、API管理等功能。</li></ul><blockquote><p><em>注：为实现数据的读写分离，提高网关的性能，网关不进行数据处理操作，数据处理由监控管理中心负责。</em></p></blockquote><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><ul><li>Redis：缓存配置和结果、分布式限流等</li><li>MongoDB：存储核心层的数据</li><li>MySQL：存储管理层和监控层的数据</li><li>Zookeeper：服务发现与服务注册</li></ul><blockquote><p><em>注：由于作者对数据同步和消息订阅没有详细展开讨论，个人直观感觉设计得有点过复杂了。</em></p><p><strong><u>本文的</u></strong>架构设计会涉及三次数据同步和消息订阅，一是 Zookeeper 和 MySQL 之间，二是 MySQL 和 MongoDB 之间，三是 MongoDB 和 Redis 之间。<strong><u>毕设的</u></strong>架构设计只涉及一次数据同步和消息订阅，即为 MySQL 和 Redis 之间。</p><ul><li>引入 Zookeeper 实现服务注册与服务发现，不可简化；MySQL 和 MongoDB 之间可以二者选一，MySQL 提供很好的事务性支持，MongoDB 更快速和易用，两者备份都有较成熟的方案；Redis 需要用作缓存与限流，不可简化。</li><li>Zookeeper 和 MySQL 之间可不同步，因为配置间有实体映射关系；MySQL 和 Redis 之间必须同步，以提高网关访问性能和实现配置热更新。</li></ul></blockquote><h2 id="API-网关实现"><a href="#API-网关实现" class="headerlink" title="API 网关实现"></a><strong>API 网关实现</strong></h2><p><img src="/images/paper_flowchart_2.png" alt="paper flowchart"></p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ul><li>使用 Redis 作为全局的分布式计数器。</li><li>业务层面，设周期为 <code>t</code> 和 阈值为 <code>d</code>，则 TPS 为 <code>d/t</code>；技术层面，Redis 创建一个存储访问的键，设置过期时间为 <code>t</code>，当值达到 <code>d</code> 则触发自动告警或熔断降级。</li></ul><h3 id="服务兜底"><a href="#服务兜底" class="headerlink" title="服务兜底"></a>服务兜底</h3><ul><li>与流量控制相结合，保证上游的数据服务永不消失。</li><li>两种实现方式：一是触发限流后请求重定向到 <code>fallback</code> 过程中处理，可以主动发起二次请求获取兜底数据，这种做法需引入额外的回调逻辑，但数据和后端服务是保持一致的；二是从缓存中读取响应数据，这种做法不能保证数据一致，但是速度快且改动小。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了一种基于 OpenResty 实现的微服务 API 网关的<strong>架构</strong>，在拆分服务、数据库的选型、数据同步和消息订阅这三个方面为毕设工作提供了宝贵的参考。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;温馨,樊婧雯,王富强.基于OpenResty平台的API网关系统的设计与实现[J].信息化研究,2020,46(03):62-68.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《Management of API Gateway Based on Micro-service Architecture》笔记</title>
    <link href="http://yoursite.com/2021/04/04/Management%20of%20API%20Gateway%20Based%20on%20Micro-service%20Architecture/"/>
    <id>http://yoursite.com/2021/04/04/Management%20of%20API%20Gateway%20Based%20on%20Micro-service%20Architecture/</id>
    <published>2021-04-03T23:00:21.000Z</published>
    <updated>2021-04-22T13:46:53.747Z</updated>
    
    <content type="html"><![CDATA[<p><em>Zhao, J &amp; Jing, S &amp; Jiang, L. (2018). Management of API Gateway Based on Micro-service Architecture. Journal of Physics: Conference Series. 1087. 032032. 10.1088/1742-6596/1087/3/032032.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><p><img src="/images/paper_xmind_1.png" alt="paper mindmap"></p><p>阅读本论文后，<strong>主要讨论以下四点</strong>：</p><ol><li>应用架构图示及分析</li><li>身份认证令牌选择</li><li>信息加载的热更新解决方案</li><li>分布式的流量控制</li></ol><h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a><strong>应用架构</strong></h2><p><img src="/images/paper_arch_1.png" alt="paper architecture"></p><h3 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h3><h4 id="Nginx-接入层"><a href="#Nginx-接入层" class="headerlink" title="Nginx 接入层"></a>Nginx 接入层</h4><ul><li>代理流量的统一入口。</li></ul><h4 id="Lua-脚本集"><a href="#Lua-脚本集" class="headerlink" title="Lua 脚本集"></a>Lua 脚本集</h4><ul><li>支持扩展各项中间件功能，如：权限认证、负载均衡、流量控制、存储日志、请求重写和反向代理等。与“管理服务-业务逻辑层”的功能相对应。</li></ul><h3 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h3><h4 id="API-接入层"><a href="#API-接入层" class="headerlink" title="API 接入层"></a>API 接入层</h4><ul><li>管理接口的统一入口。</li></ul><h4 id="业务逻辑层"><a href="#业务逻辑层" class="headerlink" title="业务逻辑层"></a>业务逻辑层</h4><ul><li>支持扩展各项业务层功能，如：接口配置信息、权限认证管理、流量控制管理、系统状态监控、系统数据统计和请求重写配置等。与“代理服务-Lua 脚本集”的功能相对应。</li></ul><h3 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h3><ul><li>用于提供 OAuth 2 + JWT 认证功能。</li></ul><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><ul><li>用于提供服务发现与服务注册功能。</li></ul><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h4><ul><li>作分布式限流的计数器；</li><li>缓存响应请求结果。</li></ul><h4 id="MySQL-集群"><a href="#MySQL-集群" class="headerlink" title="MySQL 集群"></a>MySQL 集群</h4><ul><li>主要用于存储流量控制信息。</li></ul><blockquote><p><em>注：作者没有进一步阐述为什么服务配置信息和流量控制信息要分开不同类型的数据库集群存储。</em></p></blockquote><h4 id="MongoDB-集群"><a href="#MongoDB-集群" class="headerlink" title="MongoDB 集群"></a>MongoDB 集群</h4><ul><li>主要用于存储服务配置信息。</li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a><strong>身份认证</strong></h2><p><u><strong>本文将</strong></u>采用 OAuth 2 + JWT 组合。OAuth 2 引入了认证服务器和资源服务器的概念区分，OAuth 2 协议可以携带用户信息和权限信息的特征；JWT 是包含身份信息和过期时间的加密令牌，以减少数据库的访问。两者结合使用可以实现认证和鉴权。</p><p><img src="/images/oauth.png" alt="OAuth Auth"></p><p><u><strong>毕设将</strong></u>采用 JWT 令牌，出于简化的目的去除了 OAuth，更接近原文中所提及的 AppKeys ，也可以基本满足当前的需求。AppKeys 身份认证模式更适合开放服务的场景，它不涉及用户信息和权限信息。</p><p><img src="/images/appkeys.png" alt="AppKeys Auth"></p><h2 id="信息加载"><a href="#信息加载" class="headerlink" title="信息加载"></a><strong>信息加载</strong></h2><p><u><strong>本文的</strong></u>处理方式是：先从 Nginx Cache 中读，再从 MongoDB 中读，否则判断为非法的请求。Nginx 是自定义网关技术的常见基石；MongoDB 作为文档型数据库在修改服务配置信息上十分方便。</p><p><u><strong>毕设的</strong></u>处理方式是：先从 Redis 中读，再从 MySQL 中读，否则判断为非法的请求。Redis 是一个高性能的内存键值数据库，很适合用作为缓存；MySQL 作为关系型数据库，可以更好地抽象和管理服务信息、访问控制、负载均衡和租户信息等实体关系。</p><p>尽管如此，无论哪种方式都亟待去解决以下问题：</p><blockquote><p><em>MongoDB 更新之后如何刷新 Nginx Cache ？MySQL 更新之后如何刷新 Redis ？</em></p></blockquote><p>事实上，我们可以对这个问题进行抽象化：</p><blockquote><p>已知：A 服务写多读少，流量小；B 服务只读不写，流量大；C 数据由 A 服务写入数据库，由 A 服务或 B 服务读出数据库。</p><p>问题：<strong>如何使 A 服务和 B 服务之间保证 C 数据同步且一致（请求不能直接打到底层的数据库）呢？</strong></p><p><img src="/images/paper_flowchart_1.png" alt="paper flowchart"></p></blockquote><p>进行头脑风暴之后，解决的思路有：</p><ol><li><strong>管理服务同步更新代理服务</strong>：代理服务提供配置下发接口，管理服务变更时调用该接口，代理服务在内存中重新同步管理服务配置数据。缺点：代理服务和管理服务强耦合；配置下发性能损耗。</li><li><strong>管理服务异步更新代理服务</strong>：代理服务开启异步定时任务，管理服务直接变更，代理服务在内存中周期同步管理服务配置数据。缺点：数据一致性较差。</li><li><strong>MySQL 主从复制实现读写分离</strong>：主库写从库读，主库写时要解锁，从库读时不加锁。缺点：请求直接会打到数据库，并发要求可能被满足，但比内存数据库的请求时间会长。</li><li><strong>从 MySQL 同步数据至 Redis</strong>：增删改 MySQL 时，删除 Redis 对应的记录；查 Redis 时，如果命中立即返回，没有命中查 MySQL 并回写到 Redis。缺点：需要考虑缓存穿透、击穿和雪崩等问题。</li><li><strong>引入 RabbitMQ 解耦</strong>：观察与订阅的模式，生产者的 MySQL 发生改动时通知消费者的 Redis 也发生改动。缺点：又引进新组件，运维成本进一步地增大。</li><li><strong>使用 Consul 作为配置中心</strong>：Consul 既可以作为注册中心又可以作为配置中心，是分布式的键值型数据库。缺点：服务配置信息蕴含实体关系映射，不是配置中心的经典使用场景。</li></ol><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a><strong>流量控制</strong></h2><p><strong><u>本文中</u></strong>使用 Redis 充当计数器来实现限流，适用于分布式的环境。</p><p><strong><u>毕设中</u></strong>可以采用官方原生库 <code>golang.org/x/time/rate</code> 或滴滴开源库 <code>github.com/didip/tollbooth</code>，仅适用单机版的环境。</p><p>显然，考虑到可扩展性，网关会以集群的形式进行部署，分布式限流是更为合理的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了一种基于 Nginx + Lua 实现的微服务 API 网关的<strong>架构</strong>，在身份认证、信息加载和流量控制这三个方面为毕设工作提供了宝贵的参考。</p></blockquote><hr><p><em>致谢：<a href="https://github.com/yuqi657" target="_blank" rel="noopener">@lyq大佬</a>和<a href>@d师</a>对本文亦有贡献 :D</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;Zhao, J &amp;amp; Jing, S &amp;amp; Jiang, L. (2018). Management of API Gateway Based on Micro-service Architecture. Journal of Physics: Conference Series. 1087. 032032. 10.1088/1742-6596/1087/3/032032.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《浅析微服务架构 API 网关的作用》笔记</title>
    <link href="http://yoursite.com/2021/04/03/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%20API%20%E7%BD%91%E5%85%B3%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2021/04/03/%E6%B5%85%E6%9E%90%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%20API%20%E7%BD%91%E5%85%B3%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2021-04-02T23:00:21.000Z</published>
    <updated>2021-04-22T13:46:26.857Z</updated>
    
    <content type="html"><![CDATA[<p><em>姚刚,吴海莉,王从镔.浅析微服务架构API网关的作用[J].信息系统工程,2020(12):16-18.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><p><img src="/images/paper_xmind_2.png" alt="paper mindmap"></p><p>阅读本论文后，<strong>主要讨论以下两点</strong>：</p><ol><li>API 网关的架构</li><li>API 网关的选型</li></ol><h2 id="API-网关的架构"><a href="#API-网关的架构" class="headerlink" title="API 网关的架构"></a><strong>API 网关的架构</strong></h2><p><img src="/images/paper_arch_2.png" alt="paper architecture"></p><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><ul><li>Core（核心网关）系统的功能主要是对客户请求的接收， 它将请求指向给上层的服务端，并且会把这些处理结果返回给客户端或下层服务端。</li><li>可以以集群的形式部署，需要额外的负载均衡器，反向代理连接业务集群。</li><li><strong>可以实现核心的功能：</strong>认证鉴权、限流熔断、负载均衡、反向代理、服务编排、协议转换、日志记录、数据缓存、服务注册/发现和版本/灰度发布等。</li></ul><h3 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h3><ul><li>Admin（网关管理）系统负责配置系统的各种策略，如： 限流、缓存以及告警等基础信息。</li><li>可以以集群的形式部署，但是入口是统一的。</li><li><strong>可以实现管理的功能：</strong>API 单个管理、API 分组管理、SDK/文档生成、访问配置、流控配置、协议转换配置、数据缓存配置和监控告警配置等。</li></ul><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><ul><li>Monitor（监控日志） 系统负责生成运维管理报表等。</li><li>可以以集群的形式部署，采集可以多个节点进行。</li><li><strong>可以实现监控的功能：</strong>日志处理、生成报表和自动告警等。</li></ul><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><ul><li><p>管理库：记录管理信息</p></li><li><p>日志库：记录日志信息</p></li><li><p>Redis：缓存与限流</p></li><li><p>Zookeeper：服务注册与服务发现</p></li></ul><p><img src="/images/paper_arch_3.png" alt="paper architecture"></p><h3 id="OpenResty-API-Gateway"><a href="#OpenResty-API-Gateway" class="headerlink" title="OpenResty API Gateway"></a>OpenResty API Gateway</h3><ul><li>在 OpenResty API Gateway 中主要实现安全、限流、缓存、日志、监控和身份认证等功能，另外还可以实现制定服务的注册、路由重写和负载均衡等策略。</li></ul><h3 id="Aggr-API-Gateway"><a href="#Aggr-API-Gateway" class="headerlink" title="Aggr API Gateway"></a>Aggr API Gateway</h3><ul><li>在 Aggr API Gateway 中可 以使用超时、缓存、熔断、重试、查询聚合等策略。</li></ul><blockquote><p><em>注：作者没有进一步阐述为什么需要分成两个网关，即 OpenResty API Gateway 和 Aggr API Gateway。</em></p></blockquote><h2 id="API-网关的选型"><a href="#API-网关的选型" class="headerlink" title="API 网关的选型"></a><strong>API 网关的选型</strong></h2><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li>用户密码使用加盐 sha256 加密</li><li>租户密钥使用 Md5 加密</li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><h4 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h4><ul><li>k8s 副本伸缩</li></ul><h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><ul><li>MySQL 和 Redis 做数据同步 </li></ul><h4 id="容灾备份"><a href="#容灾备份" class="headerlink" title="容灾备份"></a>容灾备份</h4><ul><li>MySQL 主从备份</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><ul><li>gin</li></ul><h4 id="大流量"><a href="#大流量" class="headerlink" title="大流量"></a>大流量</h4><ul><li>限流、熔断、降级</li></ul><h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h3><ul><li>中间件的洋葱结构</li></ul><h3 id="生命周期管理"><a href="#生命周期管理" class="headerlink" title="生命周期管理"></a>生命周期管理</h3><p><img src="/images/api_life_cycle.png" alt="API Life Cycle"></p><ul><li>可参考 <a href="https://eng.uber.com/gatewayuberapi/" target="_blank" rel="noopener">Uber Edge Gateway</a> 的设计</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了微服务 API 网关的通用设计架构，并指出在技术选型过程中需要考虑安全性、高可用、高性能、扩展性和生命周期管理等问题。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;姚刚,吴海莉,王从镔.浅析微服务架构API网关的作用[J].信息系统工程,2020(12):16-18.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Others# 新移动设备的必要软件清单</title>
    <link href="http://yoursite.com/2021/03/15/%E6%96%B0%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2021/03/15/%E6%96%B0%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%9A%84%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/</id>
    <published>2021-03-14T23:00:21.000Z</published>
    <updated>2021-05-09T07:06:56.836Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录新移动设备的<strong>必要软件清单</strong>：To C / To B</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="To-C"><a href="#To-C" class="headerlink" title="To C"></a><strong>To C</strong></h2><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ul><li>微信：手机/平板</li><li>TIM：手机/平板</li></ul><h3 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h3><ul><li>QQ音乐：手机/平板</li><li>微信读书：手机/平板</li><li>豆瓣：手机</li><li>懂球帝：手机</li><li>微博：手机</li><li>哔哩哔哩：平板</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ul><li>美团：手机</li><li>高德地图：手机</li><li>携程：手机</li><li>Keep：平板</li></ul><h3 id="购物"><a href="#购物" class="headerlink" title="购物"></a>购物</h3><ul><li>京东：手机</li><li>淘宝：平板</li></ul><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ul><li>牛客：平板</li><li>超级简历：平板</li><li>力扣：平板</li><li>V2EX：手机</li><li>知乎：手机</li><li>极客时间：平板</li><li>慕课网：平板</li></ul><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><ul><li>招商银行：手机</li><li>招商证券：手机</li><li>支付宝：手机</li><li>理财通：手机</li><li>火币：手机</li><li>币安：手机</li><li>同花顺投资账本：平板</li><li>鲨鱼记账：平板</li></ul><h2 id="To-B"><a href="#To-B" class="headerlink" title="To B"></a><strong>To B</strong></h2><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ul><li>企业微信：手机</li><li>腾讯会议：手机</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul><li>百度网盘：手机</li><li>OneDrive：平板</li></ul><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ul><li>腾讯文档：手机</li><li>Office 365：平板</li><li>Office Lens：平板</li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li>OneNote：平板</li><li>MarginNote：平板</li></ul><h3 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h3><ul><li>MOA：手机</li><li>RDM：手机</li><li>乐问：手机</li><li>脉脉：手机</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>To Do：手机/平板</li><li>v2rayNG：手机</li><li>Forest：手机/平板</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录新移动设备的&lt;strong&gt;必要软件清单&lt;/strong&gt;：To C / To B&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>#Others# 重装系统后的必要软件清单</title>
    <link href="http://yoursite.com/2021/03/15/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%9A%84%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2021/03/15/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%9A%84%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95/</id>
    <published>2021-03-14T23:00:21.000Z</published>
    <updated>2021-05-09T07:06:51.677Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录重装系统后的<strong>必要软件清单</strong>：开发 / 办公 / 实用</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a><strong>开发</strong></h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li>Notepad++：查看文本文件</li><li>Typora：查看 Markdown 文件</li><li>VSCode：查看代码文件</li></ul><h3 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h3><ul><li>Golang</li><li>Flutter</li><li>Node.js</li><li>Python</li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><h4 id="JetBrains"><a href="#JetBrains" class="headerlink" title="JetBrains"></a>JetBrains</h4><ul><li>JetBrains GoLand</li><li>JetBrains PyCharm</li><li>JetBrains 插件<ul><li>Git Tool Box：查看Git提交的记录</li><li>PreCI：本地扫描腾讯代码规范</li></ul></li></ul><h4 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h4><ul><li><p>Flutter 支持和检查</p></li><li><p>Node.js 支持和检查</p></li><li><p>VSCode 插件</p><ul><li>GitLens：查看Git提交的记录</li><li>PreCI：本地扫描腾讯代码规范</li><li>Chinese (Simplified) Language Pack for Visual Studio Code：中文显示</li><li>GBKtoUTF8：中文编码</li><li>Open In Browser：在浏览器打开 HTML 文件</li><li>Debugger for Chrome：在 Chrome 浏览器进行调试</li><li>Document This：支持快捷注释</li><li>Todo Tree：查看待办事项列表</li><li>Markdown All in One &amp; Markdown Lint &amp; Markdown Preview Github Styling &amp; Markdown TOC：Markdown支持&amp;检查&amp;渲染&amp;目录</li><li>PlantUML：绘制 UML 图表</li><li>Docker：管理 docker 镜像和容器等</li><li>Remote - WSL：远程连接 WSL 进行开发</li></ul></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>MySQL</li><li>Redis</li><li>SQLite</li></ul><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><ul><li>XShell：连接远程服务器</li><li>HeidiSQL：连接远程 MySQL 数据库</li><li>RDM：连接远程 Redis 数据库</li></ul><h3 id="虚拟系统"><a href="#虚拟系统" class="headerlink" title="虚拟系统"></a>虚拟系统</h3><ul><li>Ubuntu WSL</li><li>Alpine WSL</li></ul><h3 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h3><ul><li><p>Git：版本控制</p></li><li><p>swaggo：接口文档</p></li><li><p>Postman &amp; Newman：接口测试</p></li></ul><h3 id="公司使用"><a href="#公司使用" class="headerlink" title="公司使用"></a>公司使用</h3><ul><li>iOA</li><li>WeTERM</li><li>iFit</li><li>腾讯电脑管家</li></ul><h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a><strong>办公</strong></h2><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ul><li>微信</li><li>企业微信</li><li>TIM</li><li>Telegram</li><li>腾讯会议</li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul><li>企业云盘</li><li>OneDrive</li><li>百度网盘</li></ul><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ul><li>Office 365</li><li>Office Lens</li><li>Drawboard PDF</li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ul><li>OneNote</li><li>XMind</li></ul><h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><ul><li>StarUML</li><li>MockPlus</li></ul><h2 id="实用"><a href="#实用" class="headerlink" title="实用"></a><strong>实用</strong></h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>Bing壁纸：更换桌面和锁屏壁纸</li><li>Edge：微软浏览器</li><li>Chrome：谷歌浏览器</li><li>WinRar：解压/压缩工具，主要格式：.zip/.rar</li><li>7-Zip：解压/压缩工具，主要格式：.tar</li><li>FormatFactory：转换各种格式</li></ul><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ul><li>To Do：待办事项</li><li>Sticks：桌面便签</li></ul><h3 id="便捷"><a href="#便捷" class="headerlink" title="便捷"></a>便捷</h3><ul><li>Everything：搜索工具</li><li>TreeSize：查空间工具</li><li>Snipaste：截图工具</li><li>Ditto：剪切板工具</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录重装系统后的&lt;strong&gt;必要软件清单&lt;/strong&gt;：开发 / 办公 / 实用&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>#Sucks# 写在二零二壹</title>
    <link href="http://yoursite.com/2021/01/01/%E5%86%99%E5%9C%A8%E4%BA%8C%E9%9B%B6%E4%BA%8C%E5%A3%B9/"/>
    <id>http://yoursite.com/2021/01/01/%E5%86%99%E5%9C%A8%E4%BA%8C%E9%9B%B6%E4%BA%8C%E5%A3%B9/</id>
    <published>2020-12-31T16:00:00.000Z</published>
    <updated>2021-02-25T02:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>（（（假装有简介.jpg</p><hr><a id="more"></a><p>过去的一年其实还蛮糟糕的（或者说下半年，但是也发生了很多美好的事情。因为很长一段时间都不写作了，感觉到既遗憾又气愤，所以这不会是一篇好随感，索性就像每日面对的客体一样，整齐划一地理清我的思绪。</p><blockquote><p><strong>2020 糟糕的事情：</strong></p><ul><li>做了一些无用功，并且最后也处理得不好</li><li>工作的时候学习变得零碎，休息的时候缺乏学习热情</li><li>身体感觉不好，作息不够规律，职业病少运动，摄入过多酒精</li><li>对事物开始冷感，不阅读不写作</li><li>工作的时候很自闭，休息的时候很肥宅</li><li>最近有点本末倒置，害怕看到了尽头</li><li>感觉自己有点病了，失去了生命力</li></ul><p><strong>2020 美好的事情：</strong></p><ul><li>王小葵和王银河</li><li>春招的 offer 收割机（bushi，对自己的一点点的肯定</li><li>拿到了满意的 offer，妈宝的胜利（逃</li><li>开始学习理财知识，一场有趣的游戏</li></ul></blockquote><p>总的来说，我讨厌 2020 原地踏步甚至拼命倒退的自己，并且这种想法还会越来越少，自己也不愿意走出舒适圈。与此同时，我感到灵魂中，已经少了许多纯粹，反而添了许多欲望。2021 希望自己健健康康、开开心心。</p><blockquote><p><strong>2021 Todo List：</strong></p><ul><li>重视身体情况，早睡早起，晚上回来可以做做运动，养生</li><li>午休前和睡觉前都可以读读书，多看电影多听新歌，坚持写日记</li><li>养成每天开始工作前关注新技术，结束工作后总结这一天的好习惯</li><li>周末要出去走走，要学习知识</li><li>工作时间不要分心其它事情，做好时间管理</li><li>和别人交往善良和热情，如果需要练习那么就去练习，但也要有自己的原则</li><li>不要拖延，想就去做，每天记录自己好的变化</li><li>希望新的一年除了工作以外，有一些新的关注点</li></ul></blockquote><p>Hope is a dangerous thing for a woman like me to have. Fake it till you make it.</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;（（（假装有简介.jpg&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Sucks" scheme="http://yoursite.com/categories/Sucks/"/>
    
    
  </entry>
  
  <entry>
    <title>#Mock# Challenge to Mock - Tech Details</title>
    <link href="http://yoursite.com/2020/12/17/Challenge%20to%20Mock%20-%20Tech%20Details/"/>
    <id>http://yoursite.com/2020/12/17/Challenge%20to%20Mock%20-%20Tech%20Details/</id>
    <published>2020-12-16T23:00:21.000Z</published>
    <updated>2021-03-09T08:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>God is a mock. <em>– Just Kidding</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>最近接到了新任务——希望 mock 掉项目依赖的底座，主要基于两点考量：</p><ul><li>内部联调时可以屏蔽掉底座的影响，不至于阻塞当前开发模块的流程；</li><li>之后可集成自动化测试，降低测试成本。</li></ul><p>我的第一感觉是这个东西不好搞。一是上下游的依赖关系比较复杂，这意味着：首先让 mock 做到可以替换原来的底座以满足基本功能就需要一些努力，其次项目“看起来”运行正常并不能保证上游亦是如此；二是替换底座包含了 mock 掉数据返回和状态管理两个概念，那么就不得不在简洁和可用之间做取舍了。</p><p>前文已经展开讨论了业务分析和架构演化这两方面的内容，本文将整理一些技术细节。</p></blockquote><hr><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><ul><li><strong>优点</strong>：<ol><li>界面化操作，比较直观</li><li>可以集成 Postman 各种功能，如接口文档、接口测试等</li></ol></li><li><strong>缺点</strong>：<ol><li>设置匹配规则不够灵活</li><li>返回数据自定义不方便</li><li>所有用例都在一个文件，不好进行版本管理</li></ol></li></ul><h3 id="web-framework"><a href="#web-framework" class="headerlink" title="web framework"></a>web framework</h3><ul><li><strong>优点</strong>：<ol><li>由于是自己来实现功能，非常灵活</li></ol></li><li><strong>缺点</strong>：<ol><li>重新造很多轮子，工作量大</li></ol></li></ul><h3 id="json-server-Mock-js"><a href="#json-server-Mock-js" class="headerlink" title="json-server + Mock.js"></a>json-server + Mock.js</h3><ul><li><strong>优点</strong>：<ol><li>框架轻量且容易上手</li><li>json-server用于设置转发规则，mock.js用于模拟返回数据，分工明确</li></ol></li><li><strong>缺点</strong>：<ol><li>二次开发有语言壁垒</li></ol></li></ul><h3 id="内部框架"><a href="#内部框架" class="headerlink" title="内部框架"></a>内部框架</h3><ul><li><strong>优点</strong>：<ol><li>转发规则和返回数据在同一模板文件中约定</li><li>内置了常用的工具函数，并且支持存根注入来扩展功能</li><li>非单一的 mock 框架，支持契约测试</li></ol></li><li><strong>缺点</strong>：<ol><li>存根入口单一，复用存根不太方便</li><li>请求参数匹配支持较弱</li></ol></li></ul><blockquote><p>总结：选用内部框架更符合当前的场景。</p></blockquote><h2 id="接口文档-接口测试"><a href="#接口文档-接口测试" class="headerlink" title="接口文档 / 接口测试"></a><strong>接口文档 / 接口测试</strong></h2><h3 id="Postman-Newman"><a href="#Postman-Newman" class="headerlink" title="Postman + Newman"></a>Postman + Newman</h3><ul><li><strong>优点</strong>：<ul><li>界面化操作，比较直观</li><li>独立于代码之外，无侵入</li><li>接口测试比较强大，支持设置顺序、次数、运行测试前执行脚本和运行测试后进行判断等功能</li></ul></li><li><strong>缺点</strong>：<ul><li>生成的接口文档只能在线查看，无法本地保存</li><li>文档可定制化的部分较少，无法对输入输出字段做备注</li></ul></li></ul><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><ul><li><strong>优点</strong>：<ul><li>生成的文档信息齐全，包括路径、请求参数及描述、返回数据及描述以及示例等</li><li>直接在代码中标记，可以培养一边开发一边写文档的好习惯</li><li>配置后还可以直接发送请求测试接口</li></ul></li><li><strong>缺点</strong>：<ul><li>接口测试功能比较单一，无法很方便地管理一个功能集合层面的测试用例</li></ul></li></ul><blockquote><p>总结：如果看重文档输出，使用 Swagger；如果看重接口测试，使用 Postman + Newman。如果是在开发过程中，使用 Swagger，持续集成；如果是在开发过程后，使用 Postman + Newman，最少改动。其实最佳实践应该是两者结合起来使用，唯一的缺点就是工作量比较大。</p></blockquote><h2 id="进程部署-容器部署"><a href="#进程部署-容器部署" class="headerlink" title="进程部署 / 容器部署"></a><strong>进程部署 / 容器部署</strong></h2><ul><li><p>分别提供两种模式的部署脚本，前置知识：</p><ul><li><a href="https://lottewong.github.io/2020/05/14/速查手册之常用Linux&Shell命令/" target="_blank" rel="noopener">#Linux&amp;Shell# 速查手册：常用 Linux&amp;Shell 命令</a></li><li><a href="https://lottewong.github.io/2020/05/21/速查手册之常用Docker命令/" target="_blank" rel="noopener">#Docker# 速查手册：常用 Docker 命令</a></li><li><a href="https://lottewong.github.io/2020/05/28/速查手册之常用Kubernetes命令/" target="_blank" rel="noopener">#Kubernetes# 速查手册：常用 Kubernetes 命令</a></li></ul></li></ul><h2 id="代办事项"><a href="#代办事项" class="headerlink" title="代办事项"></a><strong>代办事项</strong></h2><ul><li>完善单元测试</li><li>精简镜像大小</li><li>接入 CI / CD 流水线</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><ul><li><a href="https://insights.thoughtworks.cn/about-contract-test/" target="_blank" rel="noopener">聊一聊契约测试</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;God is a mock. &lt;em&gt;– Just Kidding&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="Mock" scheme="http://yoursite.com/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>#Mock# Challenge to Mock - Arch Designs</title>
    <link href="http://yoursite.com/2020/12/16/Challenge%20to%20Mock%20-%20Arch%20Designs/"/>
    <id>http://yoursite.com/2020/12/16/Challenge%20to%20Mock%20-%20Arch%20Designs/</id>
    <published>2020-12-15T23:00:21.000Z</published>
    <updated>2021-03-09T08:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>God is a mock. <em>– Just Kidding</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>最近接到了新任务——希望 mock 掉项目依赖的底座，主要基于两点考量：</p><ul><li>内部联调时可以屏蔽掉底座的影响，不至于阻塞当前开发模块的流程；</li><li>之后可集成自动化测试，降低测试成本。</li></ul><p>我的第一感觉是这个东西不好搞。一是上下游的依赖关系比较复杂，这意味着：首先让 mock 做到可以替换原来的底座以满足基本功能就需要一些努力，其次项目“看起来”运行正常并不能保证上游亦是如此；二是替换底座包含了 mock 掉数据返回和状态管理两个概念，那么就不得不在简洁和可用之间做取舍了。</p><p>本文接下来要讨论的内容，暂不考虑上游影响，并坚持这样的原则：整个模块应当是轻量的，仅对高优先级且不满足的业务场景做出适配。</p></blockquote><hr><h2 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a><strong>业务分析</strong></h2><p><img src="/images/business_analysis.png" alt="项目架构"></p><h3 id="project-service"><a href="#project-service" class="headerlink" title="project service"></a>project service</h3><ul><li><strong>api</strong>：同步的项目入口，直接发请求或开异步任务来调用底座</li><li><strong>job</strong>：异步的后台任务，监控底座资源状态</li><li><strong>db</strong>：存储项目所需的数据</li></ul><h3 id="infrastructure-base"><a href="#infrastructure-base" class="headerlink" title="infrastructure base"></a>infrastructure base</h3><ul><li>提供核心功能的底座</li></ul><h3 id="external-services"><a href="#external-services" class="headerlink" title="external services"></a>external services</h3><ul><li>出于其它业务需求，会存储底座的某些数据</li></ul><blockquote><p>根据上图的分析，需考虑以下几点：</p><ol><li><p>mock 可以代替 infrastructure base 正常响应；</p></li><li><p>project service / infrastructure bases / external services 三者之间的数据应当保持一致性；</p></li><li><p>异步的后台任务需要监控状态变化，保存状态是必需的。</p></li></ol></blockquote><h2 id="架构演化"><a href="#架构演化" class="headerlink" title="架构演化"></a><strong>架构演化</strong></h2><h3 id="固定数据"><a href="#固定数据" class="headerlink" title="固定数据"></a>固定数据</h3><blockquote><p><strong>问题描述</strong>：mock 从无到有</p><p><strong>解决方法</strong>：选用预研的框架，可以方便地管理路由转发规则和模拟返回数据</p></blockquote><p><img src="/images/arch_design_1.png" alt="架构演化-固定数据"></p><ul><li><strong>mock api proxy</strong>：设置路由转发规则。应该采用正则匹配，保证增删查改的通用性，预研框架支持：<ul><li>请求路径正则匹配</li><li>请求参数正则匹配</li><li>请求主体正则匹配</li></ul></li><li><strong>hardcoded response</strong>：提供对应路由的返回数据。应该返回全量的响应字段，其中一些字段可以灵活处理：<ul><li>UUID：创建资源时返回随机 UUID；查询/修改/删除单个资源时从路径读 UUID；查询资源列表时返回固定条目和 UUID</li><li>其它字段：必传字段从请求中接收；选传字段硬编码其内容；如果出现不同响应格式，路由转发规则要做区分</li></ul></li></ul><h3 id="引入存根"><a href="#引入存根" class="headerlink" title="引入存根"></a>引入存根</h3><blockquote><p><strong>问题描述</strong>：需要对返回字段做逻辑处理，固定数据模式无法直接满足</p><p><strong>解决方法</strong>：预研框架支持存根注入，保留了扩展业务逻辑的能力</p></blockquote><p><img src="/images/arch_design_2.png" alt="架构演化-引入存根"></p><ul><li><p><strong>easy stub</strong>：支持简易逻辑扩展，主要可以用于：</p><ul><li>提供配置</li><li>提取、组合和处理请求的数据</li><li>返回随机数据或当前时间等</li></ul><p><em>注：在预研框架中，存根的入口是唯一的，因此如果希望复用多个存根，方式不太优雅。</em></p></li></ul><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><blockquote><p><strong>问题描述</strong>：目前的架构中没有办法保存数据，无法实现保持数据的一致性和监控状态变化</p><p><strong>解决办法</strong>：引入 MVC 设计和轻量级的数据库 SQLite</p></blockquote><p><img src="/images/arch_design_3.png" alt="架构演化-存储数据"></p><ul><li><strong>service stub</strong>：MVC 中的 Controller</li><li><strong>dao</strong>：MVC 中的 Model</li><li><strong>sqlite</strong>：轻量级关系型数据库，支持单文件和内存两种存储模式</li></ul><h3 id="参数匹配"><a href="#参数匹配" class="headerlink" title="参数匹配"></a>参数匹配</h3><blockquote><p><strong>问题描述</strong>：预研框架对通过请求参数匹配的支持较弱，infrastructure base A 没有相关需求，infrastructure base B 需解决该问题</p><p><strong>解决办法</strong>：只能引入轻量的 Web 框架来补充</p></blockquote><p><img src="/images/arch_design_4.png" alt="架构演化-参数匹配"></p><ul><li><p><strong>query matcher</strong>：强化请求参数匹配规则的核心中间件/装饰器</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MatchingMode</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line"> Has = <span class="hljs-string">"has"</span>  <span class="hljs-comment"># 模糊匹配</span></span><br><span class="line"> Is = <span class="hljs-string">"is"</span>  <span class="hljs-comment"># 精确匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryMatcher</span><span class="hljs-params">(object)</span>:</span></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, matching_rules, query_arguments, matching_mode)</span>:</span></span><br><span class="line">     self.matching_rules = matching_rules</span><br><span class="line">     self.query_arguments = query_arguments</span><br><span class="line">     self.matching_mode = matching_mode</span><br><span class="line"></span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">match</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">     <span class="hljs-comment"># 检查请求参数的数量</span></span><br><span class="line">     <span class="hljs-keyword">if</span> self.matching_mode == MatchingMode.Is:</span><br><span class="line">         <span class="hljs-keyword">if</span> len(self.matching_rules) != len(self.query_arguments):</span><br><span class="line">             logger.debug(<span class="hljs-string">"match failed: length of query arguments is not equal to length of the matching rule"</span>)</span><br><span class="line">             <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">     <span class="hljs-comment"># 检查请求参数的规则</span></span><br><span class="line">     <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.matching_rules:</span><br><span class="line">         <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> self.query_arguments:</span><br><span class="line">             rule = self.matching_rules[key]</span><br><span class="line">             val = str(self.query_arguments[key][<span class="hljs-number">0</span>])</span><br><span class="line">             <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(rule, val):</span><br><span class="line">                 logger.debug(<span class="hljs-string">"match failed: query argument not match matching rule. rule: %s, val: %s"</span> % (rule, val))</span><br><span class="line">                 <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line">         <span class="hljs-keyword">else</span>:</span><br><span class="line">             logger.debug(<span class="hljs-string">"match failed: query argument not in matching rules"</span>)</span><br><span class="line">             <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></span><br><span class="line">     <span class="hljs-comment"># 均通过则返回真</span></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="统一配置"><a href="#统一配置" class="headerlink" title="统一配置"></a>统一配置</h3><blockquote><p><strong>问题描述</strong>：由于同时存在两套框架及一些业务数据，配置比较分散</p><p><strong>解决办法</strong>：将这些配置统一到一个文件，并在文档上说明约束是有必要的</p></blockquote><p><img src="/images/arch_design_5.png" alt="架构演化-统一配置"></p><ul><li><p><strong>config</strong>：统一的配置文件</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"host"</span>: <span class="hljs-string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="hljs-attr">"mock_port"</span>: <span class="hljs-number">1024</span>,</span><br><span class="line">  <span class="hljs-attr">"web_port"</span>: <span class="hljs-number">2333</span>,</span><br><span class="line"></span><br><span class="line">  <span class="hljs-attr">"db_name"</span>: <span class="hljs-string">"test.db"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="hljs-attr">"mock_config_path"</span>: <span class="hljs-string">"etc/mock_config.yml"</span>, <span class="hljs-comment">// 其中还可以配置日志的路径</span></span><br><span class="line">  <span class="hljs-attr">"web_config_path"</span>: <span class="hljs-string">"etc/web_config.json"</span>, <span class="hljs-comment">// 其中还可以配置日志的路径</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-attr">"business_field_1"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"business_field_2"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"business_field_3"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><blockquote><p><strong>问题描述</strong>：预研框架自带日志记录，但是新引入的 Web 框架没有</p><p><strong>解决办法</strong>：需要自行补充日志模块</p></blockquote><p><img src="/images/arch_design_6.png" alt="架构演化-日志记录"></p><ul><li><p><strong>log</strong>：补充的日志模块</p><figure class="highlight hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="hljs-section">[formatter_web]</span></span><br><span class="line"><span class="hljs-attr">format</span>=%(asctime)s|%(name)s|%(levelname)s|%(filename)s|%(funcName)s|%(message)s</span><br><span class="line"><span class="hljs-attr">datefmt</span>=</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><blockquote><p><strong>问题描述</strong>：部署 mock 后不好快速简单地验证是否可用</p><p><strong>解决办法</strong>：额外增加两个专门用于健康检查的接口</p></blockquote><p><img src="/images/arch_design_7.png" alt="架构演化-健康检查"></p><ul><li><p><strong>h-c</strong>：健康检查接口（Health-Check API），可参考的设计：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request GET <span class="hljs-string">'http://$&#123;ip&#125;:&#123;port&#125;/mock/ping'</span> <span class="hljs-comment"># Expected response body: &#123;"msg": "pong"&#125;</span></span><br><span class="line"></span><br><span class="line">curl --location --request GET <span class="hljs-string">'http://$&#123;ip&#125;:&#123;port&#125;/web/ping'</span> <span class="hljs-comment"># Expected response body: &#123;"msg": "pong"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a><strong>预告</strong></h2><blockquote><p><a href="https://lottewong.github.io/2020/12/16/Challenge%20to%20Mock%20-%20Tech%20Details/" target="_blank" rel="noopener">下期</a>将继续讨论以下这些内容：</p><ul><li>技术选型</li><li>接口文档 / 接口测试</li><li>进程部署 / 容器部署</li><li>代办事项</li></ul></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;God is a mock. &lt;em&gt;– Just Kidding&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="Mock" scheme="http://yoursite.com/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>#Api Tests# Postman + Newman 最佳实践</title>
    <link href="http://yoursite.com/2020/11/20/Postman%20+%20Newman%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2020/11/20/Postman%20+%20Newman%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-11-19T23:00:21.000Z</published>
    <updated>2021-03-15T02:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客将讨论 Postman + Newman 的最佳实践，从以下<strong>五个方面</strong>来展开：</p><ul><li>初始化</li><li><strong>测试单个接口</strong></li><li><strong>测试逻辑功能</strong></li><li>接口文档</li><li>接口模拟</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>程序写完之后，需要对单个接口和逻辑功能来进行测试，Postman (UI) 和 Newman (CLI) 是很易用且强大的工具。当然它们也拥有提供接口文档和进行接口模拟的功能，虽使用方便但略显粗糙。本博客将着重讨论测试部分，其它功能只做简单介绍，对于概念则不会过多地解释，主要讨论其功能与流程。</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h2><h3 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h3><p><img src="/images/postman_global_variable.png" alt="公共变量"></p><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p><img src="/images/postman_environment_variable.png" alt="环境变量"></p><h3 id="Dynamic"><a href="#Dynamic" class="headerlink" title="Dynamic"></a>Dynamic</h3><p><img src="/images/postman_dynamic_variable.png" alt="内置变量"></p><blockquote><p>尽可能地抽取变量，既方便调试时修改数据，又方便自动测试的集成。</p></blockquote><h2 id="测试单个接口"><a href="#测试单个接口" class="headerlink" title="测试单个接口"></a><strong>测试单个接口</strong></h2><h3 id="请求内容"><a href="#请求内容" class="headerlink" title="请求内容"></a>请求内容</h3><p><img src="/images/postman_request.png" alt="Request"></p><ul><li><strong>Method</strong>：请求方法</li><li><strong>Path</strong>：请求路径</li><li><strong>Headers</strong>：请求头部</li><li><strong>Params</strong>：请求参数</li><li><strong>Body</strong>：请求主体</li></ul><h3 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h3><p><img src="/images/postman_pre_request_script.png" alt="Pre-request Script"></p><ul><li><p><strong>Pre-request Script</strong>：测试前脚本</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 发起请求：用户登录 */</span></span><br><span class="line"><span class="hljs-keyword">var</span> ip = pm.environment.get(<span class="hljs-string">"ip"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> port = pm.environment.get(<span class="hljs-string">"port"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> username = pm.environment.get(<span class="hljs-string">"username"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> password = pm.environment.get(<span class="hljs-string">"password"</span>); </span><br><span class="line"><span class="hljs-keyword">var</span> body = &#123;</span><br><span class="line">    <span class="hljs-string">"username"</span>: username,</span><br><span class="line">    <span class="hljs-string">"password"</span>: password</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> postRequest = &#123;</span><br><span class="line">    url: <span class="hljs-string">"http://"</span> + ip + <span class="hljs-string">":"</span> + port + <span class="hljs-string">"/login"</span>, <span class="hljs-comment">// 请求路径</span></span><br><span class="line">    method: <span class="hljs-string">'POST'</span>, <span class="hljs-comment">// 请求方法</span></span><br><span class="line">    header: [<span class="hljs-string">'Content-Type:application/json'</span>], <span class="hljs-comment">// 请求头部</span></span><br><span class="line">    body: &#123; <span class="hljs-comment">// 请求主体</span></span><br><span class="line">        mode: <span class="hljs-string">"raw"</span>, <span class="hljs-comment">// 格式</span></span><br><span class="line">        raw: <span class="hljs-built_in">JSON</span>.stringify(body) <span class="hljs-comment">// 内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">pm.sendRequest(postRequest, (err, response) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(response.json());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/postman_tests.png" alt="Tests"></p><ul><li><p><strong>Tests</strong>：测试后断言</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/* 判断状态码正常：200 */</span></span><br><span class="line">pm.test(<span class="hljs-string">"Status code is 200"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="hljs-number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 发起请求：用户登录 */</span></span><br><span class="line"><span class="hljs-keyword">var</span> ip = pm.environment.get(<span class="hljs-string">"ip"</span>);</span><br><span class="line"><span class="hljs-keyword">var</span> port = pm.environment.get(<span class="hljs-string">"port"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> postRequest = &#123;</span><br><span class="line">    url: <span class="hljs-string">"http://"</span> + ip + <span class="hljs-string">":"</span> + port + <span class="hljs-string">"/logout"</span>,</span><br><span class="line">    method: <span class="hljs-string">'POST'</span></span><br><span class="line">&#125;;</span><br><span class="line">pm.sendRequest(postRequest, (err, response) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(response.json());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 设置相关的变量：更新密码 */</span></span><br><span class="line"><span class="hljs-keyword">var</span> body = <span class="hljs-built_in">JSON</span>.parse(pm.request.body.raw);</span><br><span class="line">pm.environment.set(<span class="hljs-string">"password"</span>, body[<span class="hljs-string">"password"</span>]);</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试逻辑功能"><a href="#测试逻辑功能" class="headerlink" title="测试逻辑功能"></a><strong>测试逻辑功能</strong></h2><h3 id="用例组织"><a href="#用例组织" class="headerlink" title="用例组织"></a>用例组织</h3><ul><li><p><strong>流程跳转</strong>：优点是非常灵活，缺点是有点复杂</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postman.setNextRequest(<span class="hljs-string">"接口名称"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>目录集合</strong>：优点是比较直观，缺点是存在冗余</p><p><img src="/images/postman_collection.png" alt="功能接口组成逻辑单元"></p></li></ul><h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><h4 id="创建服务接口"><a href="#创建服务接口" class="headerlink" title="创建服务接口"></a>创建服务接口</h4><ul><li><p><strong>Pre-request Script</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 生成随机的必填字段</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rand</span> (<span class="hljs-params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> num = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (m - n + <span class="hljs-number">1</span>) + n)</span><br><span class="line">    <span class="hljs-keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> tcp_port = rand(<span class="hljs-number">8001</span>, <span class="hljs-number">8999</span>);</span><br><span class="line">pm.environment.set(<span class="hljs-string">"tcp_port"</span>, tcp_port);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> tcp_service_name = <span class="hljs-string">"test_tcp_service_"</span> + rand(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>).toString();</span><br><span class="line">pm.environment.set(<span class="hljs-string">"tcp_service_name"</span>, tcp_service_name);</span><br></pre></td></tr></table></figure></li><li><p><strong>Tests</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 状态判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Status code is 200"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="hljs-number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 错误判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Body not matches string"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.text()).not.to.include(<span class="hljs-string">"user not login"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 回写标识</span></span><br><span class="line"><span class="hljs-keyword">var</span> body = pm.response.json();</span><br><span class="line">pm.environment.set(<span class="hljs-string">"service_id"</span>, body[<span class="hljs-string">"data"</span>][<span class="hljs-string">"info"</span>][<span class="hljs-string">"id"</span>]);</span><br></pre></td></tr></table></figure></li></ul><h4 id="查询服务详情接口"><a href="#查询服务详情接口" class="headerlink" title="查询服务详情接口"></a>查询服务详情接口</h4><ul><li>对 Tests 进行状态判断和错误判断</li></ul><h4 id="修改服务接口"><a href="#修改服务接口" class="headerlink" title="修改服务接口"></a>修改服务接口</h4><ul><li><p><strong>Body</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-string">"black_list"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">    <span class="hljs-string">"client_ip_flow_limit"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-string">"forbid_list"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">    <span class="hljs-string">"ip_list"</span>: <span class="hljs-string">"127.0.0.1:2333"</span>,</span><br><span class="line">    <span class="hljs-string">"open_auth"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-string">"port"</span>: &#123;&#123;tcp_port&#125;&#125;,</span><br><span class="line">    <span class="hljs-string">"round_type"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-string">"service_desc"</span>: <span class="hljs-string">"updated"</span>, <span class="hljs-comment">// 特殊字串</span></span><br><span class="line">    <span class="hljs-string">"service_host_flow_limit"</span>: <span class="hljs-number">0</span>,</span><br><span class="line">    <span class="hljs-string">"service_name"</span>: <span class="hljs-string">"&#123;&#123;tcp_service_name&#125;&#125;"</span>,</span><br><span class="line">    <span class="hljs-string">"weight_list"</span>: <span class="hljs-string">"50"</span>,</span><br><span class="line">    <span class="hljs-string">"white_host_name"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">    <span class="hljs-string">"white_list"</span>: <span class="hljs-string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Tests</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 状态判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Status code is 200"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="hljs-number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 错误判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Body not matches string"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.text()).not.to.include(<span class="hljs-string">"user not login"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 子串判断：特殊字串</span></span><br><span class="line">pm.test(<span class="hljs-string">"Body matches string"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(<span class="hljs-string">"updated"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除服务接口"><a href="#删除服务接口" class="headerlink" title="删除服务接口"></a>删除服务接口</h4><ul><li>对 Tests 进行状态判断和错误判断</li></ul><h4 id="查询服务列表接口"><a href="#查询服务列表接口" class="headerlink" title="查询服务列表接口"></a>查询服务列表接口</h4><ul><li><p><strong>Params</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keyword:&#123;&#123;service_name&#125;&#125; <span class="hljs-comment">// 模糊搜索</span></span><br><span class="line"><span class="hljs-comment">//page_index:2</span></span><br><span class="line"><span class="hljs-comment">//page_size:2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Tests</strong>：</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 状态判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Status code is 200"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="hljs-number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 错误判断</span></span><br><span class="line">pm.test(<span class="hljs-string">"Body not matches string"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.text()).not.to.include(<span class="hljs-string">"user not login"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 数量判断：特殊数值</span></span><br><span class="line">pm.test(<span class="hljs-string">"Service not found"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.json().data.total).to.eql(<span class="hljs-number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><ul><li><p><strong>Postman</strong>：界面化操作</p><p><img src="/images/postman_run_init.png" alt="进行参数设置"></p><p><img src="/images/postman_run_result.png" alt="Postman 运行结果"></p></li><li><p><strong>Newman</strong>：命令行操作</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># file path: test/postman/*.json</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># npm install -g newman</span></span><br><span class="line"><span class="hljs-comment"># npm install -g newman-reporter-html or npm install -g newman-reporter-htmlextra</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Initiate a Postman Collection run from a given URL or path</span></span><br><span class="line">newman run <span class="hljs-built_in">test</span>/postman/giotto-gateway.postman_collection.json \</span><br><span class="line"><span class="hljs-comment"># Define the number of iterations to run</span></span><br><span class="line">-n 1 \</span><br><span class="line"><span class="hljs-comment"># Specify the extent of delay between requests (milliseconds) (default: 0)</span></span><br><span class="line">--delay-request 0 \</span><br><span class="line"><span class="hljs-comment"># Specify a URL or path to a Postman Environment</span></span><br><span class="line">-e <span class="hljs-built_in">test</span>/postman/giotto-gateway_env_local.postman_environment.json \</span><br><span class="line"><span class="hljs-comment"># Specify a URL or path to a file containing Postman Globals</span></span><br><span class="line">-g <span class="hljs-built_in">test</span>/postman/giotto-gateway.postman_globals.json \</span><br><span class="line"><span class="hljs-comment"># Specify the reporters to use for this run (default: ["cli"])</span></span><br><span class="line">-r htmlextra \</span><br><span class="line"><span class="hljs-comment"># Export test report as html (default: newman/*.html)</span></span><br><span class="line">--reporter-html-export giotto-gateway.newman_report.html</span><br></pre></td></tr></table></figure><p><img src="/images/newman_run_result.png" alt="Newman 运行结果"></p></li></ul><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a><strong>接口文档</strong></h2><p><img src="/images/postman_publish_docs.png" alt="Publish Docs"></p><h3 id="已支持的功能"><a href="#已支持的功能" class="headerlink" title="已支持的功能"></a>已支持的功能</h3><ol><li>在线接口文档</li><li>目录和接口的描述</li><li>请求示例：根据环境进行填充</li><li>响应示例：Save response as example</li><li>生成多种语言的请求代码等</li></ol><h3 id="不支持的功能"><a href="#不支持的功能" class="headerlink" title="不支持的功能"></a>不支持的功能</h3><ol><li>离线接口文档</li><li>请求参数描述</li><li>响应参数描述</li></ol><h2 id="接口模拟"><a href="#接口模拟" class="headerlink" title="接口模拟"></a><strong>接口模拟</strong></h2><h3 id="修改响应示例路径"><a href="#修改响应示例路径" class="headerlink" title="修改响应示例路径"></a>修改响应示例路径</h3><p><img src="/images/postman_save_as_example.png" alt="替换 mock_url 地址"></p><h3 id="测试接口模拟效果"><a href="#测试接口模拟效果" class="headerlink" title="测试接口模拟效果"></a>测试接口模拟效果</h3><p><img src="/images/postman_mock_server.png" alt="返回预期响应示例"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://learning.postman.com/docs/designing-and-developing-your-api/mocking-data/matching-algorithm/" target="_blank" rel="noopener">Understanding example matching</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇博客将讨论 Postman + Newman 的最佳实践，从以下&lt;strong&gt;五个方面&lt;/strong&gt;来展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试单个接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试逻辑功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接口文档&lt;/li&gt;
&lt;li&gt;接口模拟&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="Postman" scheme="http://yoursite.com/tags/Postman/"/>
    
    <category term="Newman" scheme="http://yoursite.com/tags/Newman/"/>
    
  </entry>
  
  <entry>
    <title>#Unit Test# Unit Test Pre-study and Practice in Python</title>
    <link href="http://yoursite.com/2020/11/19/Unit%20Test%20Pre-study%20and%20Practice%20in%20Python/"/>
    <id>http://yoursite.com/2020/11/19/Unit%20Test%20Pre-study%20and%20Practice%20in%20Python/</id>
    <published>2020-11-18T23:00:21.000Z</published>
    <updated>2021-03-13T16:51:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you write code, write tests. <em>– The Way of Testivus</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>近期由于工作需要，遂矛头瞄准了单元测试这片“无人之地”（bushi。单元测试的对比及意义将不会在本文赘述，一些概念的辨析也不会深究，但我个人认为最理想的观感至少应该满足两点：① 可以快速并重复地验证结果是否符合预期（毕竟不会有人写完代码不自测吧，汗.jpg）；② 将来某一天面临重构时不至于心慌慌。</p><p>提出的这两点要求看似简单明了实则十分模糊，所以单元测试是没有固定套路的，需要在方法论的指导下和团队的实践中不断完善。值得注意的是，在很多情况下我们都会”先上车后补票“（which 不是一种好习惯，因此我们也会面临额外的难题。</p><p>本文将以 Python 工程为例，预研单元测试的可行方案（仍有很大的进步空间，to be continued… 主要讨论以下内容：</p><ul><li><strong>测试流程</strong>：3A 原则；使用 Stub 和 Mock</li><li><strong>测试用例</strong>：测试哪些内容；如何设计测试用例；如何管理测试数据；用例的规范性</li><li><strong>技术选型</strong>：pytest、mock 及第三方的插件</li><li><strong>工程实践</strong>：如何设计脚手架；脱敏案例实践与分析</li><li><strong>常见问题</strong>：被测单元具有不可测性怎么办；单元测试如何保证质量</li></ul></blockquote><hr><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a><strong>测试流程</strong></h2><h3 id="遵循-3A-原则"><a href="#遵循-3A-原则" class="headerlink" title="遵循 3A 原则"></a>遵循 3A 原则</h3><p>编写单元测试用例，流程遵循 3A 原则：</p><ul><li><strong>Arrange</strong>：准备测试数据</li><li><strong>Action</strong>：调用被测单元</li><li><strong>Assert</strong>：判断测试结果</li></ul><h3 id="Stub-和-Mock"><a href="#Stub-和-Mock" class="headerlink" title="Stub 和 Mock"></a>Stub 和 Mock</h3><p>我们的工程很可能涉及到数据库的操作或外部服务调用等情况，如果我们认为单元测试应当是尽可能独立的（不同的声音见：<a href="https://gitbook.cn/books/58fa1af500a2684bf77511bc/index.html" target="_blank" rel="noopener">Mock 七宗罪</a>），那么我们就需要替换它们：</p><ul><li><strong>Stub</strong>：一般指数据上的模拟</li><li><strong>Mock</strong>：一般指数据上和行为上的模拟</li></ul><p><img src="https://miro.medium.com/max/1024/0*AtEcgjYzyuEmkWiv.png" alt="Fake、Mock和Stub的区别"></p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a><strong>测试用例</strong></h2><h3 id="测试粒度和优先级"><a href="#测试粒度和优先级" class="headerlink" title="测试粒度和优先级"></a>测试粒度和优先级</h3><ul><li><p>优先测试<strong>业务层</strong>，而不是接口层，也不是持久层<em>（牺牲了覆盖率，但最具性价比）</em></p></li><li><p>优先测试<strong>正在被频繁使用</strong>的函数</p></li><li><p>优先测试<strong>重要程度要更高</strong>的函数</p></li><li><p>优先测试<strong>代码逻辑更复杂</strong>的函数</p></li><li><p>优先测试<strong>经常会发生变更</strong>的函数</p></li></ul><h3 id="设计测试用例"><a href="#设计测试用例" class="headerlink" title="设计测试用例"></a>设计测试用例</h3><p>首先我们应该明确，单元测试本质上是一种<strong>白盒测试</strong>，所以代码分支的分析是必要的。</p><p>其次感谢来自测试同事的技术分享，帮助回顾了在软件测试课程中学习到的几种常见方法，还引入了正交试验的概念。下面主要关注其中三种：</p><ul><li><strong>等价类/边界值</strong>：适用于参数化</li><li><strong>正交试验</strong>：多分支情况下，如何选出最优用例组合</li><li><strong>流程分析</strong>：处理异常情况</li></ul><h3 id="管理测试数据"><a href="#管理测试数据" class="headerlink" title="管理测试数据"></a>管理测试数据</h3><p>需要管理的测试数据大致可以分为两类：</p><ul><li><strong>全局通用</strong>：作为全局常量写入统一的文件中</li><li><strong>局部可用</strong>：在单元测试类中定义，可使用装饰器组织输入、输出和模拟的数据</li></ul><h3 id="用例的规范性"><a href="#用例的规范性" class="headerlink" title="用例的规范性"></a>用例的规范性</h3><h4 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h4><ul><li><strong>功能测试类代码</strong>：放在主要测试的代码目录的 <code>/tests/functional</code> 中</li><li><strong>单元测试类代码</strong>：放在主要测试的代码目录的 <code>/tests/unit</code> 中</li></ul><h4 id="用例命名"><a href="#用例命名" class="headerlink" title="用例命名"></a>用例命名</h4><ul><li><strong>测试文件命名</strong>：以 <code>test_</code> 开头或以 <code>_test</code> 结尾（遵循下划线命名法）</li><li><strong>测试类命名</strong>：以 <code>Test</code> 开头（遵循驼峰命名法）</li><li><strong>测试方法命名</strong>：以 <code>test_</code> 开头（遵循下划线命名法）</li><li><strong>命名格式建议</strong>：为提高测试用例的可读性，测试方法可参考 <code>test_[测试单元名称]_[测试场景]_[测试期望结果]</code> 来命名，如 <code>test_create_user_in_openstack_success</code><ul><li><code>create_user</code> 为测试单元名称</li><li><code>in_openstack</code> 为测试场景</li><li><code>success</code> 为测试期望结果</li></ul></li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><h3 id="单测框架"><a href="#单测框架" class="headerlink" title="单测框架"></a>单测框架</h3><p>通过以下对比，<strong>Python工程项目建议选用使用更简洁、功能更丰富且兼容性更好的 <code>pytest</code> 测试框架。</strong></p><h4 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h4><ul><li>Python语言的标准单元测试框架</li><li>提供了 test cases、test suites、test fixtures、test runner 等功能</li></ul><h4 id="nose"><a href="#nose" class="headerlink" title="nose"></a>nose</h4><ul><li>基于 <code>unittest</code> 扩展插件</li><li>兼容 <code>unittest</code> 的测试集</li></ul><h4 id="pytest"><a href="#pytest" class="headerlink" title="pytest"></a>pytest</h4><ul><li>支持比 <code>unittest</code> 更简单的断言和众多的装饰器</li><li>支持测试用例分类标记和运行</li><li>支持测试数据输入的参数化</li><li>兼容 <code>unittest</code> 和 <code>nose</code> 的测试集</li><li>丰富的插件和活跃的社区</li></ul><blockquote><p>此处补充如何让 PyCharm 支持 pytest 的使用，至此 pytest 已经可以同时使用 IDE 或 CLI 来运行测试用例。</p><p>具体方法：修改 PyCharm 设置，file -&gt; Setting -&gt; Tools-&gt; Python Integrated Tools -&gt; ${ProjectName} -&gt; Default test runner -&gt; Choose <code>pytest</code> <em>(<code>unittest</code> by default)</em></p></blockquote><h3 id="模拟框架"><a href="#模拟框架" class="headerlink" title="模拟框架"></a>模拟框架</h3><p>在单元测试的过程中，需要对数据库访问和使用的外部服务进行 mock，我们希望可以实现：</p><ul><li>模拟期望的返回数据</li><li>模拟期望的调用行为</li><li>模拟出错时抛出异常</li></ul><p>由于 Python 作为一门动态语言，在运行时替换函数方法和成员变量是很容易实现的，即我们相对而言可以在不改动原有代码的情况下就实现单元测试的编写；<strong>为了更方便和更规范地使用mock功能，我们可以选用 Python 的 <code>mock</code> 库。</strong></p><h4 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h4><ul><li>Python 最广泛被使用的 <code>mock</code> 第三方库，Python 3.3 后被列入标准库中</li><li>支持模拟返回值和副作用，以及进行调用的断言</li></ul><h3 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h3><p>控制台打印的测试日志既不直观也不能持久地保存，我们需要一个可以帮助输出测试报告的工具。<strong>由于测试框架已选用 <code>pytest</code>，测试报告工具可使用 <code>pytest</code> 的插件 <code>pytest-html</code>。</strong></p><h4 id="pytest-html"><a href="#pytest-html" class="headerlink" title="pytest-html"></a>pytest-html</h4><ul><li>可输出多种文件格式的测试报告</li><li>可作为插件集成到 <code>pytest</code> 使用</li></ul><p>统计代码覆盖率有助于反推被测代码和单元测试设计的合理性。代码覆盖率高不能说明代码质量高，但是代码覆盖率低那么代码质量一般都不高。<strong>由于测试框架已选用 <code>pytest</code>，覆盖统计工具可使用 <code>pytest</code> 的插件 <code>pytest-cov</code>。</strong></p><h4 id="pytest-cov"><a href="#pytest-cov" class="headerlink" title="pytest-cov"></a>pytest-cov</h4><ul><li>兼容 <code>coverage</code> 库</li><li>可作为插件集成到 <code>pytest</code> 使用</li></ul><h2 id="工程实践"><a href="#工程实践" class="headerlink" title="工程实践"></a><strong>工程实践</strong></h2><h3 id="脚手架设计"><a href="#脚手架设计" class="headerlink" title="脚手架设计"></a>脚手架设计</h3><p>单元测试脚手架可以封装一些公共行为，提供以下功能：</p><ul><li>管理公共和临时的测试数据</li><li>封装正常调用和异常调用的流程</li><li>完备的报错提醒和日志记录</li><li>…</li></ul><h3 id="某案例分析"><a href="#某案例分析" class="headerlink" title="某案例分析"></a>某案例分析</h3><h4 id="Step-1：源码分析"><a href="#Step-1：源码分析" class="headerlink" title="Step 1：源码分析"></a>Step 1：源码分析</h4><p>阅读源码，整理出代码流程图</p><p><img src="https://www.pngkit.com/png/detail/411-4111170_convert-my-puesdo-code-to-flow-chart-inspirational.png" alt="示例代码流程分支"></p><h4 id="Step-2：用例设计"><a href="#Step-2：用例设计" class="headerlink" title="Step 2：用例设计"></a>Step 2：用例设计</h4><p>根据前述的设计建议，分别采取等价类/边界值、正交试验和流程分析等方法合理设计测试用例。应当记录（必要时可以进行合并的操作）：</p><ul><li>输入数据</li><li>输出期望</li><li>场景总数</li><li>异常分支</li></ul><h4 id="Step-3：运行用例"><a href="#Step-3：运行用例" class="headerlink" title="Step 3：运行用例"></a>Step 3：运行用例</h4><p>PyCharm 内置支持运行测试或 Terminal 输入命令运行测试</p><blockquote><p><strong>pytest 常用命令</strong>：pytest [options] [file_or_dir] [file_or_dir] […]</p><ul><li>-s：控制台输出被测单元print的数据</li><li>-k：运行包含关键字的用例</li><li>-m：运行包含分类标记的用例</li><li>-v：打印用例执行的详细过程</li><li>-q：打印用例执行的简略过程</li></ul></blockquote><h4 id="Step-4：分析结果"><a href="#Step-4：分析结果" class="headerlink" title="Step 4：分析结果"></a>Step 4：分析结果</h4><p>获得测试结果报告（pytest-html）</p><p><img src="https://blog.j-labs.pl/uploads/pytest_j-labs_01.png?1549445915564" alt="pytest-html sample"></p><blockquote><ol><li>安装 pytest-html 插件：pip install pytest-html</li><li><strong>执行 pytest 命令</strong>：pytest [options] [test_file_or_dir] [test_file_or_dir] […] <strong>–html=[file]</strong>，如 pytest ./venus –html=./venus/tests/unit/htmlrept.html</li><li>测试结果以更美观和持久化的形式被保存下来</li></ol></blockquote><p>获取覆盖情况报告（pytest-cov）</p><p><img src="https://i.stack.imgur.com/bA2fO.png" alt="pytest-cov sample"></p><blockquote><ol><li>安装 pytest-cov 插件：pip install pytest-cov</li><li><strong>执行 pytest 命令</strong>：pytest [options] [test_file_or_dir] [test_file_or_dir] […] <strong>–cov=[src_dir_or_module] –cov-report=html</strong>，如 pytest ./venus –cov=venus.cloud.node_network –cov-report=html</li><li>白色为被单元测试覆盖到的代码，红色表示未被单元测试覆盖的代码</li></ol></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><h3 id="不可测性"><a href="#不可测性" class="headerlink" title="不可测性"></a>不可测性</h3><p>单元测试的工作量比开发程序的工作量要大几乎是肯定的，但是如果你发现在掌握了一定的科学方法之后仍觉得写的十分痛苦，那么你该思考是不是因为这个被测单元本身就不具备可测性。</p><p>对现有的项目进行单元测试补充，常常会遇到这样的问题：函数代码逻辑冗杂、架构层次设计不够合理导致无法注入替换等等。<strong>这时，我想我们不得不对其进行重构了</strong>（本文对此不展开讨论，感兴趣可以阅读宝典<a href="https://book.douban.com/subject/33400354/" target="_blank" rel="noopener">《重构：改善既有代码的设计》</a>）。</p><h3 id="单测质量"><a href="#单测质量" class="headerlink" title="单测质量"></a>单测质量</h3><p>只要是代码都将面临质量的考验，单元测试也不例外。</p><p><strong>从程序本身而言</strong>，我们所能做的可以是遵循一些实用的原则：</p><ul><li>单元测试不要掺杂逻辑</li><li>每个用例针对单一情景</li><li>使用经得起考验的脚手架和工具</li><li>…</li></ul><p><strong>对开发人员来说</strong>，一些必要的意识是应该培养的：</p><ul><li>单元测试重视起来，条件允许的话考虑 TDD 开发</li><li>单元测试也应该和业务代码一样接受代码评审</li><li>循序渐进，先会写，再写好，最后优化</li><li>…</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><blockquote><p>以下文章对本文亦有贡献 :)</p></blockquote><ul><li><a href="https://mp.weixin.qq.com/s/okmWMOeBm7cCIZ1zzFr4KQ?st=F68672AD77D50E581751130E5B429071B1F9239E03C2214284F86E66F63F9BC25FCE34F1935B13E6AAACFC359362A1CA1D021CC9434D23F01612D9E9979D0E3996DC79ECBE9DDEDD14B049CE05CF28463E4B6E81D023C38F0C2DBAC19B4E567E16E744C5FEFDDEB407306FFCDE4F730EAC7F5CF821E4BD40F8E63A0C00BE89080D36A102758604B82553B9614CB6532B&vid=1688850542851245&cst=D5B50A506E3FC936F5F864A3F82938A62C3B0C7B80A7DE37D79F24AAFCE12C4491C7FCB68819166B1EFEFA8E96756324&deviceid=300bdcc7-201e-45fd-bdbd-cac1529c0f97&version=3.0.31.2998&platform=win" target="_blank" rel="noopener">从头到脚说单测——谈有效的单元测试</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA5MTAzNjU1OQ==&mid=2454779818&idx=1&sn=0c91a9b637a7a7ecf1c2d30e94d521b1&chksm=87a6d94ab0d1505c90c8f3f495402aa76f50fe42df3c4660e775670be8833c10c377956cccae&mpshare=1&scene=21&srcid=&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">测试扁平化之必备神器：好的单元测试</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><blockquote><p>使用文档和最佳实践 :)</p></blockquote><ul><li><a href="https://docs.pytest.org/en/stable/contents.html" target="_blank" rel="noopener">pytest 官方文档</a></li><li><a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="noopener">mock 官方文档</a></li><li><a href="https://docs.pytest.org/en/2.7.3/plugins_index/index.html" target="_blank" rel="noopener">pytest 插件列表</a></li><li><a href="https://github.com/openstack/nova/tree/master/nova/tests/unit" target="_blank" rel="noopener">OpenStack Nova 单元测试源码</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;If you write code, write tests. &lt;em&gt;– The Way of Testivus&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="Mock" scheme="http://yoursite.com/tags/Mock/"/>
    
    <category term="Pytest" scheme="http://yoursite.com/tags/Pytest/"/>
    
  </entry>
  
  <entry>
    <title>#Api Docs# Api Docs Pre-study and Practice in Golang</title>
    <link href="http://yoursite.com/2020/11/19/Api%20Docs%20Pre-study%20and%20Practice%20in%20Golang/"/>
    <id>http://yoursite.com/2020/11/19/Api%20Docs%20Pre-study%20and%20Practice%20in%20Golang/</id>
    <published>2020-11-18T23:00:21.000Z</published>
    <updated>2021-04-22T14:02:05.476Z</updated>
    
    <content type="html"><![CDATA[<p>If you write code, write docs. <em>– Make up by myself</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>作为一个轻度强迫症候群者，单纯觉得人工写文档也太让人难受了（还有点累。其次是希望自己可以养成先出文档后写代码的好习惯，所以就迫切需要一个提高生产效率的文档生成工具了。</p><p>总的来说，我们希望解决以下问题：</p><ol><li><p>写文档就像填表格，固定的输入规则对应固定的输出格式</p></li><li><p>整体应用文档应有这些内容：</p><ul><li><p>接口目录</p></li><li><p>变更记录</p></li><li><p>其它备注</p></li></ul></li><li><p>具体接口文档应有这些内容：</p><ul><li>功能描述</li><li>请求方法</li><li>请求路径</li><li>请求参数（规格和示例）</li><li>响应状态</li><li>响应参数（规格和示例）</li></ul></li><li><p>最好具备一定的接口测试功能</p></li></ol></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><h3 id="编码后写"><a href="#编码后写" class="headerlink" title="编码后写"></a>编码后写</h3><p>手写 <code>markdown</code> 文档：格式和内容容易出错，写完代码后再写文档积极性也不高，不推荐这样做。</p><h3 id="测试时写"><a href="#测试时写" class="headerlink" title="测试时写"></a>测试时写</h3><p><code>postman + docgen</code>：可以实现在线发布接口文档和离线导出接口文档。优点在于无侵入和允许可视化操作，缺点在于请求参数和响应参数无法增加规格描述。</p><h3 id="编码前写"><a href="#编码前写" class="headerlink" title="编码前写"></a>编码前写</h3><p><code>swaggo + swagger-markdown</code>：可以实现在线发布接口文档和离线导出接口文档。优点在于同时满足接口文档格式、内容和测试等方面的要求，缺点在于有侵入即需要改造原有项目。</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a><strong>安装工具</strong></h2><p>安装及使用 <code>swaggo</code> 工具：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装</span></span><br><span class="line">go get github.com/swaggo/swag/cmd/swag</span><br><span class="line">go get -u github.com/swaggo/gin-swagger <span class="hljs-comment"># 适用于 gin 的工程</span></span><br><span class="line">go get -u github.com/swaggo/gin-swagger/swaggerFiles <span class="hljs-comment"># 适用于 gin 的工程</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 使用</span></span><br><span class="line">swag init <span class="hljs-comment"># 在工程根目录下执行</span></span><br></pre></td></tr></table></figure><p>安装及使用 <code>swagger-markdown</code> 工具：</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装</span></span><br><span class="line">npm install -g swagger-markdown</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 使用</span></span><br><span class="line">swagger-markdown -i <span class="hljs-variable">$&#123;input_yaml&#125;</span> -o <span class="hljs-variable">$&#123;outputMarkdown&#125;</span></span><br></pre></td></tr></table></figure><h2 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a><strong>编写文档</strong></h2><h3 id="整体应用"><a href="#整体应用" class="headerlink" title="整体应用"></a>整体应用</h3><h4 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"go-swagger-sample/router"</span></span><br><span class="line"><span class="hljs-string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 注解必须写在入口函数才会生效</span></span><br><span class="line"><span class="hljs-comment">// @title Title For Go-Swagger-Sample Api Docs // 标题</span></span><br><span class="line"><span class="hljs-comment">// @description `Markdown` Description For Go-Swagger-Sample Api Docs // 描述（支持 Markdown 格式）</span></span><br><span class="line"><span class="hljs-comment">// @version 1.0.0 // 版本</span></span><br><span class="line"><span class="hljs-comment">// @host 127.0.0.1:8080 // 测试接口的请求地址</span></span><br><span class="line"><span class="hljs-comment">// @BasePath /api/v1 // 测试接口的请求前缀</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">route := router.InitRouter()</span><br><span class="line"><span class="hljs-keyword">if</span> err := route.Run(); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="hljs-string">"App crashed, err: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="router-router-go"><a href="#router-router-go" class="headerlink" title="router/router.go"></a>router/router.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"github.com/gin-gonic/gin"</span></span><br><span class="line">swaggerFiles <span class="hljs-string">"github.com/swaggo/files"</span></span><br><span class="line">ginSwagger <span class="hljs-string">"github.com/swaggo/gin-swagger"</span></span><br><span class="line"><span class="hljs-string">"go-swagger-sample/controller"</span></span><br><span class="line"><span class="hljs-string">"go-swagger-sample/docs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitRouter</span><span class="hljs-params">()</span> *<span class="hljs-title">gin</span>.<span class="hljs-title">Engine</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">docs.SwaggerInfo.Schemes = []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">"http"</span>, <span class="hljs-string">"https"</span>&#125; <span class="hljs-comment">// 测试接口的请求协议</span></span><br><span class="line">router.GET(<span class="hljs-string">"/swagger/*any"</span>, ginSwagger.WrapHandler(swaggerFiles.Handler)) <span class="hljs-comment">// 路由托管 swagger 静态资源</span></span><br><span class="line"></span><br><span class="line">userGroup := router.Group(<span class="hljs-string">"/api/v1/users"</span>)</span><br><span class="line">&#123;</span><br><span class="line">userGroup.GET(<span class="hljs-string">""</span>, controller.ListUsers)</span><br><span class="line">userGroup.POST(<span class="hljs-string">""</span>, controller.CreateUser)</span><br><span class="line">userGroup.GET(<span class="hljs-string">"/:id"</span>, controller.GetUser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体接口"><a href="#具体接口" class="headerlink" title="具体接口"></a>具体接口</h3><h4 id="controller-controller-go"><a href="#controller-controller-go" class="headerlink" title="controller/controller.go"></a>controller/controller.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> (</span><br><span class="line"><span class="hljs-string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="hljs-string">"go-swagger-sample/models"</span></span><br><span class="line"><span class="hljs-string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// User godoc</span></span><br><span class="line"><span class="hljs-comment">// @Summary 查询用户列表 // 标题</span></span><br><span class="line"><span class="hljs-comment">// @Description 查询用户列表描述 // 描述（支持 Markdown 格式） </span></span><br><span class="line"><span class="hljs-comment">// @Tags 用户接口 // 分类</span></span><br><span class="line"><span class="hljs-comment">// @Id /users</span></span><br><span class="line"><span class="hljs-comment">// @Accept json</span></span><br><span class="line"><span class="hljs-comment">// @Produce json</span></span><br><span class="line"><span class="hljs-comment">// @Param username query string false "登录名称" // 请求参数规格和示例（query）</span></span><br><span class="line"><span class="hljs-comment">// @Success 200 &#123;object&#125; models.Users "success" // 响应参数规格和示例</span></span><br><span class="line"><span class="hljs-comment">// @Router /users [get] // 测试接口的请求路径和请求方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ListUsers</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">user := &amp;models.User&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := ctx.ShouldBind(&amp;user); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> list all users</span></span><br><span class="line"></span><br><span class="line">users := []models.User&#123;*user&#125;</span><br><span class="line">res := &amp;models.Users&#123;</span><br><span class="line">TotalCount: <span class="hljs-number">1</span>,</span><br><span class="line">Items:      users,</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// User godoc</span></span><br><span class="line"><span class="hljs-comment">// @Summary 创建用户 // 标题</span></span><br><span class="line"><span class="hljs-comment">// @Description 创建用户描述 // 描述（支持 Markdown 格式） </span></span><br><span class="line"><span class="hljs-comment">// @Tags 用户接口 // 分类</span></span><br><span class="line"><span class="hljs-comment">// @Id /users</span></span><br><span class="line"><span class="hljs-comment">// @Accept json</span></span><br><span class="line"><span class="hljs-comment">// @Produce json</span></span><br><span class="line"><span class="hljs-comment">// @Param createBody body models.User true "创建用户请求主体" // 请求参数规格和示例（body）</span></span><br><span class="line"><span class="hljs-comment">// @Success 200 &#123;object&#125; models.User "success" // 响应参数规格和示例</span></span><br><span class="line"><span class="hljs-comment">// @Router /users [post] // 测试接口的请求路径和请求方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateUser</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">user := &amp;models.User&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := ctx.ShouldBind(&amp;user); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> create a user</span></span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// User godoc</span></span><br><span class="line"><span class="hljs-comment">// @Summary 查询用户详情 // 标题</span></span><br><span class="line"><span class="hljs-comment">// @Description 查询用户详情描述 // 描述（支持 Markdown 格式） </span></span><br><span class="line"><span class="hljs-comment">// @Tags 用户接口 // 分类</span></span><br><span class="line"><span class="hljs-comment">// @Id /users/:id</span></span><br><span class="line"><span class="hljs-comment">// @Accept json</span></span><br><span class="line"><span class="hljs-comment">// @Produce json</span></span><br><span class="line"><span class="hljs-comment">// @Param id path string true "用户标识" // 请求参数规格和示例（path）</span></span><br><span class="line"><span class="hljs-comment">// @Success 200 &#123;object&#125; models.User "success" // 响应参数规格和示例</span></span><br><span class="line"><span class="hljs-comment">// @Router /users/&#123;id&#125; [get] // 测试接口的请求路径和请求方法</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUser</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">user := &amp;models.User&#123;&#125;</span><br><span class="line"><span class="hljs-keyword">if</span> err := ctx.ShouldBindUri(&amp;user); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> get a user</span></span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="model-dto-go"><a href="#model-dto-go" class="headerlink" title="model/dto.go"></a>model/dto.go</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 请求参数或响应参数规格和示例</span></span><br><span class="line"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">Id       <span class="hljs-keyword">string</span> <span class="hljs-string">`json:"id" form:"id" uri:"id" example:"1"`</span>         <span class="hljs-comment">// 用户标识</span></span><br><span class="line">Username <span class="hljs-keyword">string</span> <span class="hljs-string">`json:"username" form:"username" example:"admin"`</span>  <span class="hljs-comment">// 登录名称</span></span><br><span class="line">Password <span class="hljs-keyword">string</span> <span class="hljs-string">`json:"password" form:"password" example:"123456"`</span> <span class="hljs-comment">// 登录密码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 请求参数或响应参数规格和示例</span></span><br><span class="line"><span class="hljs-keyword">type</span> Users <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">TotalCount <span class="hljs-keyword">int</span>    <span class="hljs-string">`json:"totalcount" form:"totalcount" example:"0"`</span> <span class="hljs-comment">// 共计条数</span></span><br><span class="line">Items      []User <span class="hljs-string">`json:"items" form:"items" example:""`</span>            <span class="hljs-comment">// 用户列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a><strong>接口测试</strong></h2><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p><img src="/images/api_test_query.png" alt="api test - query"></p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p><img src="/images/api_test_body.png" alt="api test - body"></p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p><img src="/images/api_test_path.png" alt="api test - path"></p><h2 id="在线查看"><a href="#在线查看" class="headerlink" title="在线查看"></a><strong>在线查看</strong></h2><p>访问 <code>http://${ip}:${port}/swagger/index.html</code> 可阅</p><h2 id="离线导出"><a href="#离线导出" class="headerlink" title="离线导出"></a><strong>离线导出</strong></h2><h3 id="导出-markdown-格式"><a href="#导出-markdown-格式" class="headerlink" title="导出 markdown 格式"></a>导出 markdown 格式</h3><p>使用 <code>swagger-markdown</code> 工具将 <code>swagger.yaml</code> 转换为 <code>docs.md</code></p><h3 id="导出-PDF-Word-HTML-格式"><a href="#导出-PDF-Word-HTML-格式" class="headerlink" title="导出 PDF/Word/HTML 格式"></a>导出 PDF/Word/HTML 格式</h3><p>使用 <code>Typora</code> 工具将 <code>docs.md</code> 转换为 <code>docs.pdf/docs.docx/docs.html</code></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><ul><li><p><a href="https://github.com/swaggo" target="_blank" rel="noopener">swaggo</a>/<a href="https://github.com/swaggo/swag" target="_blank" rel="noopener">swag</a></p></li><li><p><a href="https://github.com/syroegkin" target="_blank" rel="noopener">syroegkin</a>/<a href="https://github.com/syroegkin/swagger-markdown" target="_blank" rel="noopener">swagger-markdown</a></p></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;If you write code, write docs. &lt;em&gt;– Make up by myself&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="Swagger" scheme="http://yoursite.com/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# Golang Microservice 工程开发踩坑记录</title>
    <link href="http://yoursite.com/2020/10/01/Golang%20Microservice%20%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/10/01/Golang%20Microservice%20%E5%B7%A5%E7%A8%8B%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2020-09-30T23:00:21.000Z</published>
    <updated>2021-05-09T07:32:24.504Z</updated>
    
    <content type="html"><![CDATA[<p>第一次独立开发 Golang 微服务工程的记录，<strong>方案设计</strong>、<strong>具体开发</strong>和<strong>细节对齐</strong>通通都被我踩了一遍坑（真有我的.jpg</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a><strong>方案</strong></h2><h3 id="阶段产物"><a href="#阶段产物" class="headerlink" title="阶段产物"></a>阶段产物</h3><ul><li>目标功能：该微服务实现的功能简要说明</li><li>模块范围：该微服务涉及的上下游及自身模块的业务范围</li><li>逻辑架构：整体或内部的架构设计</li><li>调用时序：程序工作的调用时序</li><li>流程判断：复杂部分的流程判断</li><li>接口设计：先出文档然后开发</li><li>数据库模型设计：数据库表</li><li>注意事项：一些技术细节或潜在影响因素</li></ul><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><h4 id="遵循-RESTful-风格"><a href="#遵循-RESTful-风格" class="headerlink" title="遵循 RESTful 风格"></a>遵循 RESTful 风格</h4><ul><li>主要涉及路径命名、参数位置和状态返回等约束<ul><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南- 阮一峰的网络日志</a></li><li><a href="https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="noopener">RESTful API 最佳实践- 阮一峰的网络日志</a></li></ul></li></ul><h4 id="充分考虑参数属性"><a href="#充分考虑参数属性" class="headerlink" title="充分考虑参数属性"></a>充分考虑参数属性</h4><ul><li><strong>文本长度</strong>：<ul><li>Path：过长的参数不宜放在 path</li><li>Query：不同浏览器和服务器限制各异，默认为 2048 个字节</li><li>Header：若服务器不作限制，可认为无限制</li><li>Body：若服务器不作限制，可认为无限制</li></ul></li><li><strong>特殊字符</strong>：只有 Path 和 Query 需要进行编码和解码<ul><li>上游：浏览器会自动 urlencode 编码，其它需要手工 urlencode 编码</li><li>下游：一般服务器的 Web 框架已经做了 urldecode 处理</li></ul></li><li><strong>经验参考</strong>：<ul><li>Token：Path 和 Query 对文本长度有一定限制，Body 不一定符合 RESTful 风格，放在 Header 是比较合适的；但页面跳转请求时，Header 无法生效，此时放在 Query 更加方便</li></ul></li></ul><h3 id="数据库模型设计"><a href="#数据库模型设计" class="headerlink" title="数据库模型设计"></a>数据库模型设计</h3><h4 id="字段属性"><a href="#字段属性" class="headerlink" title="字段属性"></a>字段属性</h4><ul><li><strong>主键</strong>：<ul><li>字段应该唯一：存在重复不适合做主键</li><li>字段建立索引：内容太长不适合做主键</li></ul></li><li><strong>文本</strong>：<ul><li>考虑长文本使用 varchar 和 text 的区别</li></ul></li></ul><h4 id="更新方式"><a href="#更新方式" class="headerlink" title="更新方式"></a>更新方式</h4><ul><li><strong>原地更新</strong>：<ul><li>优点：节省空间</li><li>缺点：多入口的并发读写会互相影响</li></ul></li><li><strong>插入更新</strong>：<ul><li>优点：多入口的并发读写会互相独立</li><li>缺点：浪费空间</li></ul></li></ul><h4 id="索引建立"><a href="#索引建立" class="headerlink" title="索引建立"></a>索引建立</h4><ul><li>若出现长文本或数据少的情景：<ul><li>长文本不建议建索引</li><li>数据少可以不建索引</li></ul></li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a><strong>开发</strong></h2><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a>加密方法</h3><ul><li>AES (CBC + PKCS7 + PBKDF2)：对称加密算法，内部服务之间使用该加密方法，速度较快</li><li>RSA (PKCS1v15 for pub_key + PKCS8 for pri_key)：非对称加密算法，外部服务交互使用该加密方法，保密较强</li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul><li>增量更新：先查询出原记录的结构体，若请求字段不为空则更新结构体并更新数据库</li><li>全量更新：直接使用请求的结构体更新数据库</li></ul><h3 id="排查错误"><a href="#排查错误" class="headerlink" title="排查错误"></a>排查错误</h3><ul><li>查看应用运行日志和数据库操作日志</li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>Golang 使用 err 代替 expection，err 包含的错误更广泛，当希望对特定某类错误进行处理时，要注意做区分。如：使用 gorm.ErrRecordNotFound 或判断列表是否为空来区分找不到和其它异常。</li></ul><h3 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h3><ul><li>Gin 的模型绑定中，当传入字段为空时结构体会赋默认值，希望忽略为空字段应该使用指针（<a href="https://github.com/gin-gonic/gin/issues/659）。" target="_blank" rel="noopener">https://github.com/gin-gonic/gin/issues/659）。</a></li><li>Gorm 的操作中，若对空值有所限制，需要注意是否会产生副作用。</li></ul><h3 id="使用公共库"><a href="#使用公共库" class="headerlink" title="使用公共库"></a>使用公共库</h3><ul><li>尽可能使用公共库，避免地重复造轮子</li></ul><h3 id="配置与常量"><a href="#配置与常量" class="headerlink" title="配置与常量"></a>配置与常量</h3><ul><li>配置：根据环境修改变量（改变时无侵入）</li><li>常量：程序固有且基本不会改变（改变时须侵入）</li></ul><h3 id="中间件的使用"><a href="#中间件的使用" class="headerlink" title="中间件的使用"></a>中间件的使用</h3><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 可以直接在路由组应用中间件</span></span><br><span class="line">secretGroup := router.Group(CONTEXT_PATH + <span class="hljs-string">"/secrets"</span>, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line">    constants.BASIC_AUTH_USERNAME: constants.BASIC_AUTH_PASSWORD,</span><br><span class="line">&#125;))</span><br><span class="line">&#123;</span><br><span class="line">    secretGroup.GET(<span class="hljs-string">""</span>, controller.ListSecrets)</span><br><span class="line">    secretGroup.POST(<span class="hljs-string">""</span>, controller.CreateSecret)</span><br><span class="line">    secretGroup.GET(<span class="hljs-string">"/:secret_id"</span>, controller.GetSecret)</span><br><span class="line">    secretGroup.PUT(<span class="hljs-string">"/:secret_id"</span>, controller.UpdateSecret)</span><br><span class="line">    secretGroup.DELETE(<span class="hljs-string">"/:secret_id"</span>, controller.DeleteSecret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 必须在路由注册前应用才会生效</span></span><br><span class="line">config := cors.DefaultConfig()</span><br><span class="line">config.AllowAllOrigins = <span class="hljs-literal">true</span> <span class="hljs-comment">// 开放请求来源</span></span><br><span class="line">config.AddAllowHeaders(<span class="hljs-string">"customized_header"</span>) <span class="hljs-comment">// 开放请求头部</span></span><br><span class="line">router.Use(cors.New(config))</span><br></pre></td></tr></table></figure><h3 id="操作进行回滚"><a href="#操作进行回滚" class="headerlink" title="操作进行回滚"></a>操作进行回滚</h3><h4 id="数据库层面"><a href="#数据库层面" class="headerlink" title="数据库层面"></a>数据库层面</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 进行事务回滚</span></span><br><span class="line">tx.Begin()</span><br><span class="line">...</span><br><span class="line"><span class="hljs-keyword">if</span> success &#123;</span><br><span class="line">    tx.Commit()</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    tx.Rollback()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="外部调用层面"><a href="#外部调用层面" class="headerlink" title="外部调用层面"></a>外部调用层面</h4><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 创建失败后，删除脏数据</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Create</span><span class="hljs-params">(req *Request)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">    resource := createResource(req)</span><br><span class="line">    </span><br><span class="line">err := doSomethingElse()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        deleteResource(resource)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 删除失败后，创建旧数据</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Delete</span><span class="hljs-params">(req *Request)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">    resource := getResource(req)</span><br><span class="line">    deleteResource(req)</span><br><span class="line">    </span><br><span class="line">err := doSomethingElse()</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        createResource(resource)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a><strong>对齐</strong></h2><h3 id="接口出错的判定依据"><a href="#接口出错的判定依据" class="headerlink" title="接口出错的判定依据"></a>接口出错的判定依据</h3><ul><li>根据状态码还是错误码</li></ul><h3 id="同名参数的真实含义"><a href="#同名参数的真实含义" class="headerlink" title="同名参数的真实含义"></a>同名参数的真实含义</h3><ul><li>有些参数看似同名，实际上代表的意思在不同的微服务中是不一样的</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><ol><li><p><a href="https://www.cnblogs.com/southday/p/10885235.html" target="_blank" rel="noopener">由前端登录验证，页面跳转，携带headers token引发的思考和尝试</a></p></li><li><p><a href="https://blog.csdn.net/u012150370/article/details/46552755?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328641.52387.16157916333250637&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control" target="_blank" rel="noopener">服务端与客户端跳转的区别</a></p></li><li><p><a href="https://juejin.cn/post/6844903768484478989" target="_blank" rel="noopener">cookie 你咋还没整明白？</a></p></li><li><p><a href="https://blog.csdn.net/wang379275614/article/details/53333054" target="_blank" rel="noopener">浏览器同源策略及Cookie的作用域</a></p></li><li><p><a href="https://juejin.cn/post/6844904034181070861" target="_blank" rel="noopener">傻傻分不清之Cookie、Session、Token、JWT</a></p></li><li><p><a href="https://blog.csdn.net/brycegao321/article/details/78038272#:~:text=text%EF%BC%9A,%E7%9A%84%E6%80%BB%E5%AD%97%E8%8A%82%E6%95%B0%E3%80%82" target="_blank" rel="noopener">MySQL性能优化之char、varchar、text的区别</a></p></li><li><p><a href="https://blog.csdn.net/vernonzheng/article/details/8079183" target="_blank" rel="noopener">利用散列算法优化唯一索引性能（长文本字段的唯一索引优化）</a></p></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次独立开发 Golang 微服务工程的记录，&lt;strong&gt;方案设计&lt;/strong&gt;、&lt;strong&gt;具体开发&lt;/strong&gt;和&lt;strong&gt;细节对齐&lt;/strong&gt;通通都被我踩了一遍坑（真有我的.jpg&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Gin" scheme="http://yoursite.com/tags/Gin/"/>
    
    <category term="Gorm" scheme="http://yoursite.com/tags/Gorm/"/>
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Docker# 速查手册：常用 Docker 命令</title>
    <link href="http://yoursite.com/2020/05/15/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Docker%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/15/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Docker%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-14T23:00:21.000Z</published>
    <updated>2021-05-08T16:00:49.461Z</updated>
    
    <content type="html"><![CDATA[<p>覆盖在学习和工作中的<strong>常用 Docker 命令</strong>：Image / Container / Storage / Network</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a><strong>Image</strong></h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看全部镜像详情</span></span><br><span class="line">docker images</span><br><span class="line">docker images -a</span><br><span class="line"><span class="hljs-comment"># 查看全部镜像标识</span></span><br><span class="line">docker images -aq</span><br><span class="line"><span class="hljs-comment"># 查看指定镜像详情</span></span><br><span class="line">docker inspect <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line">docker inspect <span class="hljs-variable">$&#123;image_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --network <span class="hljs-variable">$&#123;network_mode&#125;</span> -f /path/to/dockerfile -t <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span> /path/to/data</span><br></pre></td></tr></table></figure><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 具备元数据等</span></span><br><span class="line">docker save -o <span class="hljs-variable">$&#123;output&#125;</span>.tar <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line">docker save -o <span class="hljs-variable">$&#123;output&#125;</span>.tar <span class="hljs-variable">$&#123;image_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 具备元数据等</span></span><br><span class="line">docker load -i <span class="hljs-variable">$&#123;input&#125;</span>.tar</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag <span class="hljs-variable">$&#123;image_id&#125;</span> <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 删除全部镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"><span class="hljs-comment"># 删除指定镜像</span></span><br><span class="line">docker rmi -f <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line">docker rmi -f <span class="hljs-variable">$&#123;image_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Example: a sample python image</span></span><br><span class="line"><span class="hljs-keyword">FROM</span> ubuntu <span class="hljs-comment"># basic image</span></span><br><span class="line"><span class="hljs-keyword">MAINTAINER</span> lottewong &lt;lottewong21@gmail.com&gt; <span class="hljs-comment"># author info</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># install sqlite3, python3, pip3 and other tools</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="hljs-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    apt-get install -y python3 \</span></span><br><span class="line"><span class="hljs-bash">                       python3-dev \</span></span><br><span class="line"><span class="hljs-bash">                       python3-pip \</span></span><br><span class="line"><span class="hljs-bash">                       openssl \</span></span><br><span class="line"><span class="hljs-bash">                       libssl-dev \</span></span><br><span class="line"><span class="hljs-bash">                       libffi-dev \</span></span><br><span class="line"><span class="hljs-bash">                       net-tools \</span></span><br><span class="line"><span class="hljs-bash">                       sqlite3 &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    ln -s /usr/bin/python3 /usr/bin/python &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    ln -s /usr/bin/pip3 /usr/bin/pip &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    apt install -y vim lsof curl</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># make data and log directories</span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="hljs-bash"> mkdir -p /data/<span class="hljs-built_in">test</span>-proj/dependencies &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    mkdir -p /var/<span class="hljs-built_in">log</span>/<span class="hljs-built_in">test</span>-proj</span></span><br><span class="line"><span class="hljs-keyword">WORKDIR</span><span class="hljs-bash"> /data/<span class="hljs-built_in">test</span>-proj <span class="hljs-comment"># fix work directory</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># install test-proj depending packages</span></span><br><span class="line"><span class="hljs-keyword">COPY</span><span class="hljs-bash"> dependencies dependencies <span class="hljs-comment"># copy files from host to container</span></span></span><br><span class="line"><span class="hljs-keyword">RUN</span><span class="hljs-bash"> <span class="hljs-built_in">cd</span> dependencies &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    pip install -r requirements.txt &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    tar -zvxf some-package.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    rm -rf some-package.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="hljs-bash">    <span class="hljs-built_in">cd</span> /data/<span class="hljs-built_in">test</span>-proj/dependencies/some-package &amp;&amp; python setup.py install</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># start init script (mount file when running container)</span></span><br><span class="line"><span class="hljs-comment"># CMD ["sh", "start.sh"]</span></span><br><span class="line"><span class="hljs-comment"># ENTRYPOINT ["sh", "start.sh"]</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># RUN: 镜像层命令，应用于 docker build 时</span></span><br><span class="line"><span class="hljs-comment"># CMD: 容器层命令，应用于 docker run 时（当指定命令时会被忽略）</span></span><br><span class="line"><span class="hljs-comment"># ENTRYPOINT: 容器层命令，应用于 docker run 时（无论何种情况都被执行）</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Shell形式执行命令: &lt;instruction&gt; &lt;command&gt;</span></span><br><span class="line"><span class="hljs-comment"># Exec形式执行命令: &lt;instruction&gt; ["executable", "param1", "param2", "param3", ...]</span></span><br></pre></td></tr></table></figure><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a><strong>Container</strong></h2><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看全部容器详情</span></span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="hljs-comment"># 查看全部容器标识</span></span><br><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># -p 可以映射多个端口</span></span><br><span class="line"><span class="hljs-comment"># -v 可以挂载多个目录</span></span><br><span class="line"><span class="hljs-comment"># -d 后台运行</span></span><br><span class="line"><span class="hljs-comment"># -it 交互运行</span></span><br><span class="line">docker run --name=<span class="hljs-variable">$&#123;container_name&#125;</span> -d -p <span class="hljs-variable">$&#123;host_port&#125;</span>:<span class="hljs-variable">$&#123;ctnr_port&#125;</span> -v /path/to/host:/path/to/ctnr <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span> (<span class="hljs-variable">$&#123;command&#125;</span>)</span><br><span class="line">docker run --name=<span class="hljs-variable">$&#123;container_name&#125;</span> -it -p <span class="hljs-variable">$&#123;host_port&#125;</span>:<span class="hljs-variable">$&#123;ctnr_port&#125;</span> -v /path/to/host:/path/to/ctnr <span class="hljs-variable">$&#123;image_id&#125;</span> (<span class="hljs-variable">$&#123;command&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># --rm 运行后就删除</span></span><br><span class="line"><span class="hljs-comment"># Example: docker run --rm busybox nslookup baidu.com</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Example: docker exec -it test /bin/bash</span></span><br><span class="line">docker <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$&#123;container_name&#125;</span> <span class="hljs-variable">$&#123;command&#125;</span></span><br><span class="line">docker <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$&#123;container_id&#125;</span> <span class="hljs-variable">$&#123;command&#125;</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="hljs-variable">$&#123;container_name&#125;</span></span><br><span class="line">docker start <span class="hljs-variable">$&#123;container_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop <span class="hljs-variable">$&#123;container_name&#125;</span></span><br><span class="line">docker stop <span class="hljs-variable">$&#123;container_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart <span class="hljs-variable">$&#123;container_name&#125;</span></span><br><span class="line">docker restart <span class="hljs-variable">$&#123;container_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 删除全部容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="hljs-comment"># 删除指定容器</span></span><br><span class="line">docker rm -f <span class="hljs-variable">$&#123;container_name&#125;</span></span><br><span class="line">docker rm -f <span class="hljs-variable">$&#123;container_id&#125;</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a <span class="hljs-string">"<span class="hljs-variable">$&#123;author&#125;</span>"</span> -m <span class="hljs-string">"<span class="hljs-variable">$&#123;message&#125;</span>"</span> <span class="hljs-variable">$&#123;container_name&#125;</span> <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line">docker commit -a <span class="hljs-string">"<span class="hljs-variable">$&#123;author&#125;</span>"</span> -m <span class="hljs-string">"<span class="hljs-variable">$&#123;message&#125;</span>"</span> <span class="hljs-variable">$&#123;container_id&#125;</span> <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br></pre></td></tr></table></figure><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 没有元数据等</span></span><br><span class="line">docker <span class="hljs-built_in">export</span> <span class="hljs-variable">$&#123;container_name&#125;</span> &gt; <span class="hljs-variable">$&#123;export&#125;</span>.tar</span><br><span class="line">docker <span class="hljs-built_in">export</span> <span class="hljs-variable">$&#123;container_id&#125;</span> &gt; <span class="hljs-variable">$&#123;export&#125;</span>.tar</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 没有元数据等</span></span><br><span class="line">cat <span class="hljs-variable">$&#123;import&#125;</span>.tar | docker import - <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br></pre></td></tr></table></figure><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 从容器到主机</span></span><br><span class="line">docker cp <span class="hljs-variable">$&#123;container&#125;</span>:/path/to/ctnr /path/to/host</span><br><span class="line"><span class="hljs-comment"># 从主机到容器</span></span><br><span class="line">docker cp /path/to/host <span class="hljs-variable">$&#123;container&#125;</span>:/path/to/ctnr</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs <span class="hljs-variable">$&#123;container_name&#125;</span></span><br><span class="line">docker logs <span class="hljs-variable">$&#123;container_id&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a><strong>Storage</strong></h2><ul><li><em>To be continued…</em></li></ul><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a><strong>Network</strong></h2><ul><li><em>To be continued…</em></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;覆盖在学习和工作中的&lt;strong&gt;常用 Docker 命令&lt;/strong&gt;：Image / Container / Storage / Network&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Cheat Sheet" scheme="http://yoursite.com/categories/Cheat-Sheet/"/>
    
    
    <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>#Kubernetes# 速查手册：常用 Kubernetes 命令</title>
    <link href="http://yoursite.com/2020/05/15/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Kubernetes%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/15/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Kubernetes%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-14T23:00:21.000Z</published>
    <updated>2021-05-08T16:00:40.777Z</updated>
    
    <content type="html"><![CDATA[<p>覆盖在学习和工作中的<strong>常用 Kubernetes 命令</strong>：Node / Pod / Deployment / Service / Configmap / Storage / Network</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a><strong>Node</strong></h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes | grep <span class="hljs-variable">$&#123;node_name&#125;</span></span><br><span class="line">kubectl describe node <span class="hljs-variable">$&#123;node_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a><strong>Pod</strong></h2><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods | grep <span class="hljs-variable">$&#123;pod_name&#125;</span></span><br><span class="line">kubectl describe pod <span class="hljs-variable">$&#123;pod_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$&#123;pod_name&#125;</span> -c <span class="hljs-variable">$&#123;container_name&#125;</span> <span class="hljs-variable">$&#123;command&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 只删除 pod 不删除 deployment，相当于再重启</span></span><br><span class="line">kubectl delete pod <span class="hljs-variable">$&#123;pod_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a><strong>Deployment</strong></h2><h3 id="查看-2"><a href="#查看-2" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments | grep <span class="hljs-variable">$&#123;deployment_name&#125;</span></span><br><span class="line">kubectl describe deployment <span class="hljs-variable">$&#123;deployment_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 保存后会直接生效</span></span><br><span class="line">kubectl edit deployment <span class="hljs-variable">$&#123;deployment_name&#125;</span></span><br><span class="line"></span><br><span class="line">kubectl <span class="hljs-built_in">set</span> image deployment/<span class="hljs-variable">$&#123;deployment_name&#125;</span> <span class="hljs-variable">$&#123;container_name&#125;</span>=<span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a><strong>Service</strong></h2><h3 id="查看-3"><a href="#查看-3" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services | grep <span class="hljs-variable">$&#123;service_name&#125;</span></span><br><span class="line">kubectl describe service <span class="hljs-variable">$&#123;service_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Configmap"><a href="#Configmap" class="headerlink" title="Configmap"></a><strong>Configmap</strong></h2><h3 id="查看-4"><a href="#查看-4" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get configmaps | grep <span class="hljs-variable">$&#123;configmap_name&#125;</span></span><br><span class="line">kubectl describe configmap <span class="hljs-variable">$&#123;configmap_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 需重启后才会生效</span></span><br><span class="line">kubectl edit configmap <span class="hljs-variable">$&#123;configmap_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a><strong>Storage</strong></h2><ul><li><em>To be continued…</em></li></ul><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a><strong>Network</strong></h2><ul><li><em>To be continued…</em></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;覆盖在学习和工作中的&lt;strong&gt;常用 Kubernetes 命令&lt;/strong&gt;：Node / Pod / Deployment / Service / Configmap / Storage / Network&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Cheat Sheet" scheme="http://yoursite.com/categories/Cheat-Sheet/"/>
    
    
    <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>#Linux&amp;Shell# 速查手册：常用 Linux&amp;Shell 命令</title>
    <link href="http://yoursite.com/2020/05/08/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Linux&amp;Shell%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/08/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Linux&amp;Shell%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-07T23:00:21.000Z</published>
    <updated>2021-05-25T08:17:38.541Z</updated>
    
    <content type="html"><![CDATA[<p>覆盖在学习和工作中的<strong>常用 Linux 命令</strong>：管理 / 连接 / 网络 / 进程 / 文件 / 文本</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="列举"><a href="#列举" class="headerlink" title="列举"></a>列举</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Ubuntu</span></span><br><span class="line">apt list --installed</span><br><span class="line"><span class="hljs-comment"># CentOS</span></span><br><span class="line">yum list installed</span><br><span class="line"><span class="hljs-comment"># Alpine</span></span><br><span class="line">apk info</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Ubuntu</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get -y upgrade</span><br><span class="line"><span class="hljs-comment"># CentOS</span></span><br><span class="line">yum update</span><br><span class="line"><span class="hljs-comment"># Alpine</span></span><br><span class="line">apk update</span><br><span class="line">apk upgrade</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Ubuntu</span></span><br><span class="line">apt-get install -y <span class="hljs-variable">$&#123;package&#125;</span></span><br><span class="line"><span class="hljs-comment"># CentOS</span></span><br><span class="line">yum install -y <span class="hljs-variable">$&#123;package&#125;</span></span><br><span class="line"><span class="hljs-comment"># Alpine</span></span><br><span class="line">apk add --upgrade <span class="hljs-variable">$&#123;package&#125;</span></span><br></pre></td></tr></table></figure><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Ubuntu</span></span><br><span class="line">apt-get --purge remove <span class="hljs-variable">$&#123;package&#125;</span></span><br><span class="line"><span class="hljs-comment"># CentOS</span></span><br><span class="line">yum remove <span class="hljs-variable">$&#123;package&#125;</span></span><br><span class="line"><span class="hljs-comment"># Alpine</span></span><br><span class="line">apk del <span class="hljs-variable">$&#123;package&#125;</span></span><br></pre></td></tr></table></figure><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a><strong>连接</strong></h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -p <span class="hljs-variable">$&#123;port&#125;</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span></span><br><span class="line">sshpass -p <span class="hljs-variable">$&#123;password&#125;</span> ssh -p <span class="hljs-variable">$&#123;port&#125;</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span></span><br></pre></td></tr></table></figure><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="hljs-variable">$&#123;host&#125;</span> <span class="hljs-variable">$&#123;port&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping <span class="hljs-variable">$&#123;host&#125;</span></span><br></pre></td></tr></table></figure><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup <span class="hljs-variable">$&#123;domain&#125;</span></span><br></pre></td></tr></table></figure><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl \</span><br><span class="line">-X <span class="hljs-variable">$&#123;method&#125;</span> \</span><br><span class="line">-H <span class="hljs-string">"<span class="hljs-variable">$&#123;header_key&#125;</span>: <span class="hljs-variable">$&#123;"header_val"&#125;</span>"</span> \</span><br><span class="line">-d <span class="hljs-string">"<span class="hljs-variable">$&#123;json_data&#125;</span>"</span> \</span><br><span class="line"><span class="hljs-variable">$&#123;api_url&#125;</span> \</span><br></pre></td></tr></table></figure><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h <span class="hljs-variable">$&#123;host&#125;</span> -P <span class="hljs-variable">$&#123;port&#125;</span> -u <span class="hljs-variable">$&#123;username&#125;</span> -p</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a><strong>网络</strong></h2><h3 id="查看-ip"><a href="#查看-ip" class="headerlink" title="查看 ip"></a>查看 ip</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip a |grep eth</span><br></pre></td></tr></table></figure><h3 id="查看-dns"><a href="#查看-dns" class="headerlink" title="查看 dns"></a>查看 dns</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/resolv.conf |grep nameserver</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a><strong>进程</strong></h2><h3 id="查询-proc"><a href="#查询-proc" class="headerlink" title="查询 proc"></a>查询 proc</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep <span class="hljs-variable">$&#123;proc_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查询-port"><a href="#查询-port" class="headerlink" title="查询 port"></a>查询 port</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:<span class="hljs-variable">$&#123;port&#125;</span></span><br></pre></td></tr></table></figure><h3 id="从-proc-查-port-从-port-查-proc"><a href="#从-proc-查-port-从-port-查-proc" class="headerlink" title="从 proc 查 port / 从 port 查 proc"></a>从 proc 查 port / 从 port 查 proc</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp |grep <span class="hljs-variable">$&#123;proc_name&#125;</span></span><br><span class="line">netstat -tunlp |grep <span class="hljs-variable">$&#123;port&#125;</span></span><br></pre></td></tr></table></figure><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep <span class="hljs-variable">$&#123;including_keyword&#125;</span> | grep -v <span class="hljs-variable">$&#123;excluding_keyword&#125;</span></span><br><span class="line"><span class="hljs-built_in">kill</span> -s 9 <span class="hljs-variable">$&#123;pid&#125;</span></span><br><span class="line"></span><br><span class="line">ps -ef | grep <span class="hljs-variable">$&#123;including_keyword&#125;</span> | grep -v <span class="hljs-variable">$&#123;excluding_keyword&#125;</span> | awk <span class="hljs-string">'&#123;print $2&#125;'</span> | xargs <span class="hljs-built_in">kill</span> -s 9</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">kill</span> -s 9 `pgrep <span class="hljs-variable">$&#123;keyword&#125;</span>`</span><br><span class="line"></span><br><span class="line">pkill -9 <span class="hljs-variable">$&#123;keyword&#125;</span></span><br></pre></td></tr></table></figure><h3 id="后台任务"><a href="#后台任务" class="headerlink" title="后台任务"></a>后台任务</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 启动</span></span><br><span class="line">nohup <span class="hljs-variable">$&#123;command&#125;</span> &gt;&gt; <span class="hljs-variable">$&#123;log_file&#125;</span> 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="hljs-comment"># 查看</span></span><br><span class="line"><span class="hljs-built_in">jobs</span> -l</span><br><span class="line">lsof -i:<span class="hljs-variable">$&#123;job_port&#125;</span></span><br><span class="line">ps -ef |grep <span class="hljs-variable">$&#123;job_cmd&#125;</span></span><br><span class="line"><span class="hljs-comment"># 杀死</span></span><br><span class="line"><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$&#123;job_pid&#125;</span></span><br><span class="line"><span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$&#123;proc_pid&#125;</span></span><br></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h2><h3 id="从服务器下载到本机"><a href="#从服务器下载到本机" class="headerlink" title="从服务器下载到本机"></a>从服务器下载到本机</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r -P <span class="hljs-variable">$&#123;port&#125;</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span>:/path/to/remote /path/to/<span class="hljs-built_in">local</span> <span class="hljs-comment"># 包括文件</span></span><br><span class="line">rsync -a -e ssh --exclude=<span class="hljs-string">"<span class="hljs-variable">$&#123;pattern&#125;</span>"</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span>:/path/to/remote /path/to/<span class="hljs-built_in">local</span> <span class="hljs-comment"># 排除文件</span></span><br></pre></td></tr></table></figure><h3 id="从本机上传到服务器"><a href="#从本机上传到服务器" class="headerlink" title="从本机上传到服务器"></a>从本机上传到服务器</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /path/to/<span class="hljs-built_in">local</span> -P <span class="hljs-variable">$&#123;port&#125;</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span>:/path/to/remote <span class="hljs-comment"># 包括文件</span></span><br><span class="line">rsync -a -e ssh --exclude=<span class="hljs-string">"<span class="hljs-variable">$&#123;pattern&#125;</span>"</span> /path/to/<span class="hljs-built_in">local</span> <span class="hljs-variable">$&#123;username&#125;</span>@<span class="hljs-variable">$&#123;host&#125;</span>:/path/to/remote <span class="hljs-comment"># 排除文件</span></span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>zip</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -d /path/to/unzip <span class="hljs-variable">$&#123;pkg_to_unzip&#125;</span></span><br></pre></td></tr></table></figure><p>tar</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf <span class="hljs-variable">$&#123;pkg_to_untar&#125;</span> <span class="hljs-comment"># 解压 tar 包</span></span><br><span class="line">tar -zxvf <span class="hljs-variable">$&#123;pkg_to_untar&#125;</span> <span class="hljs-comment"># 解压 tar.gz 包</span></span><br><span class="line">tar -jxvf <span class="hljs-variable">$&#123;pkg_to_untar&#125;</span> <span class="hljs-comment"># 解压 tar.bz2 包</span></span><br></pre></td></tr></table></figure><h3 id="加压"><a href="#加压" class="headerlink" title="加压"></a>加压</h3><p>zip</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip -r /path/to/unzip <span class="hljs-variable">$&#123;pkg_to_zip&#125;</span></span><br><span class="line">zip -d /path/to/zip <span class="hljs-variable">$&#123;file_to_delete&#125;</span> <span class="hljs-comment"># 从压缩包中删除文件</span></span><br><span class="line">zip -m /path/to/zip <span class="hljs-variable">$&#123;file_to_append&#125;</span> <span class="hljs-comment"># 向压缩包中添加文件</span></span><br></pre></td></tr></table></figure><p>tar</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf <span class="hljs-variable">$&#123;pkg_to_tar&#125;</span> <span class="hljs-comment"># 加压 tar 包</span></span><br><span class="line">tar -zcvf <span class="hljs-variable">$&#123;pkg_to_tar&#125;</span> <span class="hljs-comment"># 加压 tar.gz 包</span></span><br><span class="line">tar -zjvf <span class="hljs-variable">$&#123;pkg_to_tar&#125;</span> <span class="hljs-comment"># 加压 tar.bz2 包</span></span><br></pre></td></tr></table></figure><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a><strong>文本</strong></h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>json</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="hljs-variable">$&#123;file&#125;</span> | python -m json.tool</span><br></pre></td></tr></table></figure><p>log</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">less <span class="hljs-variable">$&#123;log_file&#125;</span></span><br><span class="line">vim <span class="hljs-variable">$&#123;log_file&#125;</span></span><br><span class="line">tail -n <span class="hljs-variable">$&#123;number&#125;</span> <span class="hljs-variable">$&#123;log_file&#125;</span></span><br><span class="line">tail -f <span class="hljs-variable">$&#123;log_file&#125;</span></span><br></pre></td></tr></table></figure><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>复制</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + Insert</span><br></pre></td></tr></table></figure><p>粘贴</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">shift</span> + Insert</span><br></pre></td></tr></table></figure><p>移动</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gg <span class="hljs-comment"># 首行</span></span><br><span class="line">G <span class="hljs-comment"># 末行</span></span><br><span class="line"><span class="hljs-built_in">shift</span> + ^ <span class="hljs-comment"># 行首</span></span><br><span class="line"><span class="hljs-built_in">shift</span> + $ <span class="hljs-comment"># 行末</span></span><br></pre></td></tr></table></figure><p>搜索</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/pattern <span class="hljs-comment"># 向前搜索</span></span><br><span class="line">？pattern <span class="hljs-comment"># 向后搜索</span></span><br><span class="line">n <span class="hljs-comment"># 上一个</span></span><br><span class="line">N <span class="hljs-comment"># 下一个</span></span><br></pre></td></tr></table></figure><p>查看缩进和行尾</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: <span class="hljs-built_in">set</span> list</span><br></pre></td></tr></table></figure><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>分隔</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F:<span class="hljs-string">"<span class="hljs-variable">$&#123;seperator&#125;</span>"</span> <span class="hljs-string">'/$&#123;pattern&#125;/$&#123;command&#125;'</span> <span class="hljs-variable">$&#123;file&#125;</span></span><br></pre></td></tr></table></figure><p>替换</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="hljs-string">"s/<span class="hljs-variable">$&#123;pattern&#125;</span>/<span class="hljs-variable">$&#123;substr&#125;</span>/g"</span></span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R <span class="hljs-variable">$&#123;user&#125;</span>:<span class="hljs-variable">$&#123;group&#125;</span> <span class="hljs-variable">$&#123;file&#125;</span></span><br><span class="line">chmod 777 <span class="hljs-variable">$&#123;file&#125;</span></span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h2><h3 id="统计代码"><a href="#统计代码" class="headerlink" title="统计代码"></a>统计代码</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y cloc</span><br><span class="line">cloc <span class="hljs-variable">$&#123;include_dir&#125;</span> --exclude-dir=<span class="hljs-variable">$&#123;exclude_dir&#125;</span></span><br></pre></td></tr></table></figure><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t<span class="hljs-variable">$&#123;threads&#125;</span> -c<span class="hljs-variable">$&#123;connections&#125;</span> -d<span class="hljs-variable">$&#123;duration&#125;</span> --latency <span class="hljs-variable">$&#123;url&#125;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;覆盖在学习和工作中的&lt;strong&gt;常用 Linux 命令&lt;/strong&gt;：管理 / 连接 / 网络 / 进程 / 文件 / 文本&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Cheat Sheet" scheme="http://yoursite.com/categories/Cheat-Sheet/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>#Git# 速查手册：常用 Git 命令</title>
    <link href="http://yoursite.com/2020/05/08/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/05/08/%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B9%8B%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</id>
    <published>2020-05-07T23:00:21.000Z</published>
    <updated>2021-04-22T13:51:32.166Z</updated>
    
    <content type="html"><![CDATA[<p>覆盖在学习和工作中的<strong>常用 Git 命令</strong>：配置 / 仓库 / 查看 / 暂存 / 提交 / 回退 / 克隆 / 拉取 / 推送 / 合并 / 冲突 / 分支 / 标签 / 工具</p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h2><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 配置多个本地用户的账号</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 全局级</span></span><br><span class="line">git config --global user.name <span class="hljs-string">"<span class="hljs-variable">$&#123;user_name&#125;</span>"</span></span><br><span class="line">git config --global user.email <span class="hljs-string">"<span class="hljs-variable">$&#123;user_email&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 仓库级</span></span><br><span class="line"><span class="hljs-comment"># git config --global --unset user.name "$&#123;user_name&#125;"</span></span><br><span class="line"><span class="hljs-comment"># git config --global --unset user.name "$&#123;user_email&#125;"</span></span><br><span class="line">git config --<span class="hljs-built_in">local</span> user.name <span class="hljs-string">"<span class="hljs-variable">$&#123;user_name&#125;</span>"</span></span><br><span class="line">git config --<span class="hljs-built_in">local</span> user.email <span class="hljs-string">"<span class="hljs-variable">$&#123;user_email&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 提交级</span></span><br><span class="line">git commit --amend --author=<span class="hljs-string">"<span class="hljs-variable">$&#123;user_name&#125;</span> &lt;<span class="hljs-variable">$&#123;user_email&#125;</span>&gt;"</span></span><br><span class="line">git commit --amend --reset-author</span><br></pre></td></tr></table></figure><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 配置多个远程仓库的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 生成密钥</span></span><br><span class="line">ssh-keygen -t rsa_github</span><br><span class="line">ssh-keygen -t rsa_gitlab</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 配置密钥</span></span><br><span class="line">vim ~/.ssh/config</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/rsa_github</span><br><span class="line"> </span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName gitlab.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/rsa_gitlab</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a><strong>仓库</strong></h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Example: git remote add origin git@github.com:LotteWong/lottewong.github.io.git</span></span><br><span class="line">git remote add <span class="hljs-variable">$&#123;origin_name&#125;</span> git@host:/path/to/registry.git</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm <span class="hljs-variable">$&#123;origin_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h2><h3 id="当前状态"><a href="#当前状态" class="headerlink" title="当前状态"></a>当前状态</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="差异分析"><a href="#差异分析" class="headerlink" title="差异分析"></a>差异分析</h3><h4 id="工作区-vs-暂存区"><a href="#工作区-vs-暂存区" class="headerlink" title="工作区 vs 暂存区"></a>工作区 vs 暂存区</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff (<span class="hljs-variable">$&#123;branch_name&#125;</span>) (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># 默认 branch = current; file 若不填作用于全部文件</span></span><br></pre></td></tr></table></figure><h4 id="暂存区-vs-版本库"><a href="#暂存区-vs-版本库" class="headerlink" title="暂存区 vs 版本库"></a>暂存区 vs 版本库</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached (<span class="hljs-variable">$&#123;commit_id&#125;</span>) (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># 默认 commit = HEAD; file 若不填作用于全部文件</span></span><br></pre></td></tr></table></figure><h4 id="工作区-vs-版本库"><a href="#工作区-vs-版本库" class="headerlink" title="工作区 vs 版本库"></a>工作区 vs 版本库</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="hljs-variable">$&#123;commit_id&#125;</span> (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># file 若不填作用于全部文件</span></span><br></pre></td></tr></table></figure><h4 id="版本库-vs-版本库"><a href="#版本库-vs-版本库" class="headerlink" title="版本库 vs 版本库"></a>版本库 vs 版本库</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff <span class="hljs-variable">$&#123;commit_id&#125;</span> <span class="hljs-variable">$&#123;commit_id&#125;</span> (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># file 若不填作用于全部文件</span></span><br></pre></td></tr></table></figure><h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 详细</span></span><br><span class="line">git <span class="hljs-built_in">log</span> --oneline <span class="hljs-comment"># 简略</span></span><br><span class="line">git <span class="hljs-built_in">log</span> --graph <span class="hljs-comment"># 图示</span></span><br></pre></td></tr></table></figure><h3 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a><strong>暂存</strong></h2><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash pop <span class="hljs-comment"># 默认还原栈顶数据</span></span><br><span class="line">git stash pop stash@&#123;<span class="hljs-variable">$&#123;id&#125;</span>&#125; <span class="hljs-comment"># 指定还原特定数据</span></span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash clear <span class="hljs-comment"># 删除全部暂存数据</span></span><br><span class="line">git stash drop stash@&#123;<span class="hljs-variable">$&#123;id&#125;</span>&#125; <span class="hljs-comment"># 删除指定暂存数据</span></span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a><strong>提交</strong></h2><h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A or git add --all <span class="hljs-comment"># 提交整个仓库全部文件(New/Modified/Deleted)</span></span><br><span class="line">git add /path/to/file <span class="hljs-comment"># 提交指定目录全部文件(New/Modified/Deleted)</span></span><br><span class="line">git add -u <span class="hljs-comment"># 提交整个仓库已有文件(Modified/Deleted)</span></span><br></pre></td></tr></table></figure><h3 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="hljs-string">"<span class="hljs-variable">$&#123;commit_message&#125;</span>"</span> <span class="hljs-comment"># 指定提交信息标题</span></span><br><span class="line">git commit <span class="hljs-comment"># 打开默认的编辑器</span></span><br><span class="line">git commit --amend <span class="hljs-comment"># 追加提交</span></span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a><strong>回退</strong></h2><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard (<span class="hljs-variable">$&#123;commit_id&#125;</span>) (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># 默认 commit = HEAD; file 若不填作用于全部文件</span></span><br><span class="line"><span class="hljs-comment"># git checkout $&#123;commit_id&#125; $&#123;file&#125;</span></span><br></pre></td></tr></table></figure><h3 id="暂存区-1"><a href="#暂存区-1" class="headerlink" title="暂存区"></a>暂存区</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset (--mixed) (<span class="hljs-variable">$&#123;commit_id&#125;</span>) (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># 会清除暂存区; 默认 commit = HEAD; file 若不填作用于全部文件</span></span><br><span class="line"><span class="hljs-comment"># git checkout $&#123;commit_id&#125; $&#123;file&#125;</span></span><br></pre></td></tr></table></figure><h3 id="版本库-1"><a href="#版本库-1" class="headerlink" title="版本库"></a>版本库</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 向前移动指针</span></span><br><span class="line">git reset --soft (<span class="hljs-variable">$&#123;commit_id&#125;</span>) (<span class="hljs-variable">$&#123;file&#125;</span>) <span class="hljs-comment"># 不清除暂存区; 默认 commit = HEAD; file 若不填作用于全部文件</span></span><br><span class="line"><span class="hljs-comment"># git checkout $&#123;commit_id&#125; $&#123;file&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 向后移动指针</span></span><br><span class="line">git revert (<span class="hljs-variable">$&#123;commit_id&#125;</span>) <span class="hljs-comment"># 默认 commit = HEAD; 撤销单次提交并生成单次提交</span></span><br><span class="line">git revert -n <span class="hljs-variable">$&#123;old_commit&#125;</span>^..<span class="hljs-variable">$&#123;new_commit&#125;</span> <span class="hljs-comment"># 撤销连续提交并生成单次提交</span></span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a><strong>克隆</strong></h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Example: git clone git@github.com:LotteWong/lottewong.github.io.git</span></span><br><span class="line">git <span class="hljs-built_in">clone</span> git@host:/path/to/registry.git <span class="hljs-comment"># 克隆默认分支</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Example: git clone -b backup git@github.com:LotteWong/lottewong.github.io.git</span></span><br><span class="line">git <span class="hljs-built_in">clone</span> -b <span class="hljs-variable">$&#123;branch_name&#125;</span> git@host:/path/to/registry.git <span class="hljs-comment"># 克隆指定分支</span></span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a><strong>拉取</strong></h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git pull origin <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 拉取到已有本地分支</span></span><br><span class="line">git checkout -b <span class="hljs-variable">$&#123;local_branch&#125;</span> <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 拉取并新建本地分支</span></span><br><span class="line"></span><br><span class="line">git fetch origin <span class="hljs-variable">$&#123;remote_branch&#125;</span></span><br><span class="line">git pull origin <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># git fetch + git merge</span></span><br><span class="line">git pull origin --rebase <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># git fetch + git rebase</span></span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a><strong>推送</strong></h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 推送到已有远程分支</span></span><br><span class="line">git push origin <span class="hljs-variable">$&#123;local_branch&#125;</span>:<span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 推送并新建远程分支</span></span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a><strong>合并</strong></h2><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="hljs-variable">$&#123;branch_name&#125;</span> <span class="hljs-comment"># 带有单独合并提交信息</span></span><br><span class="line">git merge <span class="hljs-variable">$&#123;branch_name&#125;</span> --no-commit <span class="hljs-comment"># 不带单独合并提交信息</span></span><br><span class="line">git merge --<span class="hljs-built_in">continue</span> <span class="hljs-comment"># 解决冲突后使用</span></span><br><span class="line">git merge --abort <span class="hljs-comment"># 不打算解决冲突</span></span><br></pre></td></tr></table></figure><h3 id="Squash"><a href="#Squash" class="headerlink" title="Squash"></a>Squash</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git merge --squash <span class="hljs-variable">$&#123;branch_name&#125;</span> <span class="hljs-comment"># A1 → B1 → M3</span></span><br><span class="line">git rebase -i <span class="hljs-variable">$&#123;startpoint&#125;</span> (<span class="hljs-variable">$&#123;endpoint&#125;</span>) <span class="hljs-comment"># A1 → B1 → C2 → D2; 默认 endpoint = HEAD</span></span><br><span class="line"><span class="hljs-comment"># pick(p)：保留本次提交</span></span><br><span class="line"><span class="hljs-comment"># squash(s)：合并前后提交</span></span><br></pre></td></tr></table></figure><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="hljs-variable">$&#123;branch_name&#125;</span></span><br><span class="line">git rebase --<span class="hljs-built_in">continue</span> <span class="hljs-comment"># 解决冲突后使用</span></span><br><span class="line">git rebase --abort <span class="hljs-comment"># 不打算解决冲突</span></span><br></pre></td></tr></table></figure><h3 id="Cherry-Pick"><a href="#Cherry-Pick" class="headerlink" title="Cherry-Pick"></a>Cherry-Pick</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick <span class="hljs-variable">$&#123;commit_id&#125;</span></span><br><span class="line">git cherry-pick --<span class="hljs-built_in">continue</span> <span class="hljs-comment"># 解决冲突后使用</span></span><br><span class="line">git cherry-pick --abort <span class="hljs-comment"># 不打算解决冲突</span></span><br></pre></td></tr></table></figure><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a><strong>冲突</strong></h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="hljs-comment"># 查看冲突文件</span></span><br><span class="line">vim /path/to/file <span class="hljs-comment"># 解决冲突之处</span></span><br><span class="line">git add /path/to/file <span class="hljs-comment"># 将文件加入暂存区</span></span><br><span class="line">git commit -m <span class="hljs-string">"<span class="hljs-variable">$&#123;commit_message&#125;</span>"</span> <span class="hljs-comment"># 将文件加入版本库</span></span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a><strong>分支</strong></h2><h3 id="查看-2"><a href="#查看-2" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -a <span class="hljs-comment"># 全部分支</span></span><br><span class="line">git branch -v <span class="hljs-comment"># 本地分支</span></span><br><span class="line">git branch -r <span class="hljs-comment"># 远程分支</span></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote update</span><br></pre></td></tr></table></figure><h3 id="新建-1"><a href="#新建-1" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="hljs-variable">$&#123;local_branch&#125;</span> <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 创建本地分支：远程分支 → 本地分支</span></span><br><span class="line">git push origin <span class="hljs-variable">$&#123;local_branch&#125;</span>:<span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 创建远程分支：本地分支 → 远程分支</span></span><br></pre></td></tr></table></figure><h3 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 本地重命名分支</span></span><br><span class="line">git branch -m <span class="hljs-variable">$&#123;old_branch&#125;</span> <span class="hljs-variable">$&#123;new_branch&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 远程重命名分支</span></span><br><span class="line">git push origin --delete <span class="hljs-variable">$&#123;old_remote_branch&#125;</span></span><br><span class="line">git push origin <span class="hljs-variable">$&#123;new_local_branch&#125;</span>:<span class="hljs-variable">$&#123;new_remote_branch&#125;</span></span><br></pre></td></tr></table></figure><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="hljs-variable">$&#123;branch_name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="hljs-built_in">set</span>-upstream-to=<span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-variable">$&#123;local_branch&#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d <span class="hljs-variable">$&#123;local_branch&#125;</span> <span class="hljs-comment"># 非强制删除本地分支</span></span><br><span class="line">git branch -D <span class="hljs-variable">$&#123;local_branch&#125;</span> <span class="hljs-comment"># 强制性删除本地分支</span></span><br><span class="line">git push origin --delete <span class="hljs-variable">$&#123;remote_branch&#125;</span> <span class="hljs-comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><strong>标签</strong></h2><h3 id="查看-3"><a href="#查看-3" class="headerlink" title="查看"></a>查看</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="hljs-comment"># 全部标签</span></span><br><span class="line">git show <span class="hljs-variable">$&#123;tag_name&#125;</span> <span class="hljs-comment"># 指定标签</span></span><br></pre></td></tr></table></figure><h3 id="新建-2"><a href="#新建-2" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="hljs-variable">$&#123;tag_name&#125;</span> (<span class="hljs-variable">$&#123;commit_id&#125;</span>) <span class="hljs-comment"># 创建本地标签; 默认 commit = HEAD</span></span><br><span class="line">git push origin --tags <span class="hljs-comment"># 创建全部远程标签</span></span><br><span class="line">git push origin <span class="hljs-variable">$&#123;tag_name&#125;</span> <span class="hljs-comment"># 创建指定远程标签</span></span><br></pre></td></tr></table></figure><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d <span class="hljs-variable">$&#123;tag_name&#125;</span> <span class="hljs-comment"># 删除本地标签</span></span><br><span class="line">git push origin --delete <span class="hljs-variable">$&#123;tag_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a><strong>工具</strong></h2><h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装</span></span><br><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 使用</span></span><br><span class="line">git cz</span><br></pre></td></tr></table></figure><h3 id="变更日志"><a href="#变更日志" class="headerlink" title="变更日志"></a>变更日志</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装</span></span><br><span class="line">npm install -g conventional-changelog-cli</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 使用</span></span><br><span class="line">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure><h3 id="代码评审"><a href="#代码评审" class="headerlink" title="代码评审"></a>代码评审</h3><ul><li><em>To be continued…</em></li></ul><h3 id="子级模块"><a href="#子级模块" class="headerlink" title="子级模块"></a>子级模块</h3><ul><li><em>To be continued…</em></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;覆盖在学习和工作中的&lt;strong&gt;常用 Git 命令&lt;/strong&gt;：配置 / 仓库 / 查看 / 暂存 / 提交 / 回退 / 克隆 / 拉取 / 推送 / 合并 / 冲突 / 分支 / 标签 / 工具&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Cheat Sheet" scheme="http://yoursite.com/categories/Cheat-Sheet/"/>
    
    
    <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>

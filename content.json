{"pages":[{"title":"About Me","text":"程序员小黄，SCUTSE大数据方向本科在读，M$ Club技术部指定背锅位，会吃福建人的广东人，面临90后中年危机，爱的人都叫夏洛特。","link":"/about/index.html"}],"posts":[{"title":"#Machine Learning# 0.2 训练、测试与可视化","text":"本文主要讨论Machine Learning的基本步骤，包括以下三个部分： 训练的三部曲 测试的验证法 数据的可视化 Machine Learning训练的三部曲Step 1: ModelStep 2: Goodness of FunctionStep 3: Best Function合并更新参数123456# 更新参数：梯度下降def update(self, X, y): m = X.shape[0] # 标签个数 dTheta = X.T.dot(self.model(X) - y) / m self.theta = self.theta - self.eta * dTheta 分开更新参数123456789# 更新参数：梯度下降def update(self, X, y): m = X.shape[0] # 标签个数 dZ = self.model(X) - y dW = X.T.dot(dZ) / m db = dZ.sum(axis=0, keepdims=True) / m self.W = self.W - self.eta * dW self.b = self.b - self.eta * db 测试的验证法损失值准确率回归问题1# pass 分类问题1234567891011121314# 数据的准确率def accuracy(self, X, y, threshold): y_pred = self.predict(X_test, threshold) y_true = y right = 0 total = y_pred.shape[0] for i in range(total): if y_pred[i] == y_true[i]: right += 1 acc = right / total return str(acc * 100) 数据的可视化损失值123456789# 数据的可视化def visualize(self, iter_list, loss_list): plt.figure('program title') plt.title('chart title') ax = plt.gca() ax.set_xlabel('epoch') ax.set_ylabel('loss') ax.plot(iter_list, loss_list, color='r', linewidth=1, alpha=0.6) plt.show()","link":"/2019/11/04/SCUT机器学习 (2) 训练、测试与可视化/"},{"title":"#Machine Learning# 0.3 算法与工程","text":"本文主要讨论Machine Learning的基本步骤，包括以下两个部分： 优化与调参学 软件工程之戒 Machine Learning优化与调参学数据的预处理归一化标准化中心化正则化参数的初始化全零初始1self.theta = np.zeros((n, 1)) # 权重偏置 全一初始1self.theta = np.ones((n, 1)) # 权重偏置 随机初始1self.theta = np.random.random((n, 1)) # 权重偏置 正态初始123self.theta = np.random.normal(size=(n, 1)) # 权重偏置或self.theta = np.random.randn(n, 1) # 权重偏置 梯度下降选择 参考链接：深度学习最全优化方法总结比较（SGD，Adagrad，Adadelta，Adam，Adamax，Nadam） 经验之谈： 对于稀疏数据，尽量使用学习率可自适应的优化方法，不用手动调节，而且最好采用默认值。 SGD通常训练时间更长，但是在好的初始化和学习率调度方案的情况下，结果更可靠。 如果在意更快的收敛，并且需要训练较深较复杂的网络时，推荐使用学习率自适应的优化方法。 Adadelta，RMSprop，Adam是比较相近的算法，在相似的情况下表现差不多。 在想使用带动量的RMSprop，或者Adam的地方，大多可以使用Nadam取得更好的效果。 单样本 梯度下降速度最快，迭代计算时间最长 123456# 单样本梯度下降def sgd(self, X_array, y_array): for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) self.update(X_single, y_single) 小批量 梯度下降速度适中，迭代计算时间适中 123456# 小批量梯度下降def mbgd(self, X_array, y_array, batch_size=64): for idx in range(0, X_array.shape[0], batch_size): X_batch = X_array[idx:idx+batch_size] y_batch = y_array[idx:idx+batch_size] self.update(X_batch, y_batch) 全样本 梯度下降速度最慢，迭代计算时间最短 123# 全样本梯度下降def fbgd(self, X_array, y_array): self.update(X_array, y_array) Adagrad 自定义学习率，后期更新很慢 123456789101112# Adagraddef adagrad(self, X_array, y_array): sigma = 1e-7 # 平滑项 for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) grad = X_single.T.dot(self.model(X_single) - y_single) / 1 self.grad_sum = self.grad_sum + np.sum(grad * grad) dTheta = -self.eta * (grad / math.sqrt(self.grad_sum + sigma)) self.theta = self.theta + dTheta RMSprop 进化Adagrad，变种Adadelta 123456789101112# RMSpropdef adadelta(self, X_array, y_array): sigma = 1e-7 # 平滑项 gama = 0.5 # 冲顶项 for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) grad = X_single.T.dot(self.model(X_single) - y_single) / 1 self.grad_sum = gama * self.grad_sum + (1 - gama) * np.sum(grad * grad) dTheta = -self.eta * (grad / math.sqrt(self.grad_sum + sigma)) Adadelta 自定义学习率，后期更新变快 1234567891011121314# Adadeltadef adadelta(self, X_array, y_array): sigma = 1e-7 # 平滑项 gama = 0.9 # 冲顶项 for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) grad = X_single.T.dot(self.model(X_single) - y_single) / 1 self.grad_sum = gama * self.grad_sum + (1 - gama) * np.sum(grad * grad) dTheta = -self.eta * (grad / math.sqrt(self.grad_sum + sigma)) self.theta = self.theta + dTheta Adamax 简单范围的Adam，学习率有确定范围，参数比较平稳 123456789101112131415161718# Adamaxdef adamax(self, X_array, y_array): sigma = 1e-7 # 平滑项 u = 0.5 # 冲顶项 v = 0.5 # 冲顶项 for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) grad = X_single.T.dot(self.model(X_single) - y_single) / 1 self.grad = u * self.grad + (1 - u) * grad self.grad_sum = np.maximum(v * self.grad_sum, np.sum(grad)) m_t_hat = self.grad / (1 - u) n_t_hat = self.grad_sum / (1 - v) dTheta = - self.eta / (n_t_hat + sigma) * m_t_hat self.theta = self.theta + dTheta Adam 带动量项的RMSprop，学习率有确定范围，参数比较平稳 123456789101112131415161718# Adamdef adam(self, X_array, y_array): sigma = 1e-7 # 平滑项 u = 0.5 # 冲顶项 v = 0.5 # 冲顶项 for X_item, y_item in zip(X_array, y_array): X_single = X_item.reshape(1, -1) y_single = y_item.reshape(1, -1) grad = X_single.T.dot(self.model(X_single) - y_single) / 1 self.grad = u * self.grad + (1 - u) * grad self.grad_sum = v * self.grad_sum + (1 - v) * np.sum(grad * grad) m_t_hat = self.grad / (1 - u) n_t_hat = self.grad_sum / (1 - v) dTheta = - self.eta * (m_t_hat / (math.sqrt(n_t_hat) + sigma)) self.theta = self.theta + dTheta 软件工程之戒模块函数","link":"/2019/11/04/SCUT机器学习 (3) 算法与工程/"},{"title":"#Machine Learning# 0.1 数据与参数","text":"本文主要讨论Machine Learning的基本步骤，包括以下两个部分： 读取处理数据 初始化各参数 Machine Learning读取处理数据本地数据合并更新参数123456789101112131415local_file = '$local_dataset_path'def load_data(path): # 读取本地原始数据集 raw_data = datasets.load_svmlight_file(path) # 返回scipy.matrix 或 raw_data = datasets.load_files(path) # 返回numpy.ndarray # 分开处理特征和标签 X, y = np.c_[raw_data[0].A, np.ones((raw_data[0].shape[0], 1))], raw_data[1].reshape(-1, 1) 或 X, y = np.c_[raw_data[0], np.ones((raw_data[0].shape[0], 1))], raw_data[1].reshape(-1, 1) # 切分训练集和验证集 return model_selection.train_test_split(X, y, test_size=0.3, random_state=0) 分开更新参数123456789101112131415local_file = '$local_dataset_path'def load_data(path): # 读取本地原始数据集 raw_data = datasets.load_svmlight_file(path) # 返回scipy.matrix 或 raw_data = datasets.load_files(path) # 返回numpy.ndarray\"\"\" # 分开处理特征和标签 X, y = raw_data[0].A, raw_data[1].reshape(-1, 1) 或 X, y = raw_data[0], raw_data[1].reshape(-1, 1) # 切分训练集和验证集 return model_selection.train_test_split(X, y, test_size=0.3, random_state=0) 网络数据合并更新参数1# pass 分开更新参数1# pass 随机抽样1234567891011121314# 随机抽样def random_select(self, X, y, sample_size=1024): m = X.shape[0] # 标签个数 i_list = random.sample([idx for idx in range(n)], batch_size) # 下标序列 X_list = [] y_list = [] for i in i_list: X_list.append(X[i]) y_list.append(y[i]) X_array = np.array(X_list) y_array = np.array(y_list) return X_array, y_array 初始化各参数不抽样合并更新参数123456# 加载参数def __init__(self, eta, epo, batch_size, n): self.eta = eta # 学习速率 self.epo = epo # 迭代次数 self.batch_size = batch_size # 批处理量 self.theta = np.zeros((n, 1)) # 权重偏置 分开更新参数1234567# 加载参数def __init__(self, eta, epo, batch_size, n): self.eta = eta # 学习速率 self.epo = epo # 迭代次数 self.batch_size = batch_size # 批处理量 self.W = np.zeros((n, 1)) # 权重参数 self.b = 0 # 偏置参数 要抽样合并更新参数1234567# 加载参数def __init__(self, eta, epo, sample_size, batch_size, n): self.eta = eta # 学习速率 self.epo = epo # 迭代次数 self.sample_size = sample_size # 抽样大小 self.batch_size = batch_size # 批处理量 self.theta = np.zeros((n, 1)) # 权重偏置 分开更新参数12345678# 加载参数def __init__(self, eta, epo, sample_size, batch_size, n): self.eta = eta # 学习速率 self.epo = epo # 迭代次数 self.sample_size = sample_size # 抽样大小 self.batch_size = batch_size # 批处理量 self.W = np.zeros((n, 1)) # 权重参数 self.b = 0 # 偏置参数","link":"/2019/11/04/SCUT机器学习 (1) 数据与参数/"},{"title":"#Sucks# 写在二零二零","text":"（（（无聊的吐槽与没多少意思的复读 生活大概就是，起落落落。 说来写前端也快一个月，虽然以后大概率也不会再专门帮别人写了，但是这个过程还是有不少心得体会，比如理解需求、读懂架构、实现逻辑、保证质量和通过测试之类的。因为开发得比较随心所欲，换句话说，就是还有很多成长的空间，非常感谢实验室的师兄师姐没有嫌弃我这个小菜🐓，黄老师还即将迎来人生第一桶金 (?) 要说后悔到印象深刻的事情，除了在GY咕咕掉了信息竞赛，选大数据可能也是之一。无非就是不会也不那么感兴趣，每次先被数据处理套路一阵，然后对着数学公式和神经网络敲敲敲，Debug没有机器也要来个地久天长，还要盯着AB榜患得患失，实在是搞不来啦。虽然但是，学算法这半年来最大的收获就是学会如何心平气和地把一件事情真正做得又快又好（我却还没有 过去一年搞了不少副业，真正有营养的却不多，从C++写到Dart，从全栈写到云计算…明白一个人的精力其实很有限，什么都干 ≈ 什么都没干。就算开了n个repo，混了n个project，挂了n个title，只要面对 Talk is cheap, show me the code 也会沉默。当然广度优先学习也没什么不好，只不过是我算力太弱了罢。到了三年级就不可避免地想东想西，不能再像从前一样说干就干，要考虑沉默成本，要面对同伴焦虑，决定去哪搬砖也要小心翼翼，还随时在敏捷和投机的边缘试探。最后说服了自己还是保持刮刮乐的心态…（刮到了云计算还挺幸运的 误 虽然以上都是些无关痛痒的吐槽，生活也还有它的复杂和美好，诸如和很长一段时间被gaslight的自己和解啦、第一次当PM啦、去M$RA蹭吃蹭喝啦、再见好X友发展革命情谊啦、无疾而终地暗恋过啦云云，这种时候还是要感慨年轻真好滴嘻嘻 :P 以前觉得生活本质就是和西西弗斯神话一样的，相当虚无。现在也还是这么觉得，不过直觉上有趣的事情那么多，每天一点点也足够快乐。一般来说，新年之交讲的东西都不能信，就不继续一本正经胡说八道了，最后以小波作结吧： “那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想再一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。”","link":"/2020/01/01/写在二零二零/"},{"title":"#Machine Learning# 4 决策树","text":"本文主要讨论Machine Learning的决策树C4.5算法，包括以下六个部分： 任务描述 数据分析 算法分析 数据处理 优化调参 结果分析 Decision Tree任务描述 在信用卡欺诈检测数据集上通过实现决策树C4.5算法，用于识别欺诈性信用卡交易。 数据特征数据列表 creditcard.csv 整体特征 数据集合名称 数据类型 字段数 行数 值离散 值缺失 相关任务 信用卡欺诈检测 数值数据 31 284807 否 无 分类 属性描述 序号 字段名 数据类型 字段描述 1 Time Integer 此交易与数据集中第一个交易之间经过的秒数 2-29 V1-V28 Float 经PAC转换后数据 30 Amount Float 交易金额 31 Class Integer 在欺诈情况下取值为1，否则取0 算法分析[训练]算法简介 C4.5是一系列用在机器学习和数据挖掘中分类问题的算法，它的目标是监督学习。即给定一个数据集，其中的每一个元组都能用一组属性值描述，每一个元组属于一个互斥的类别中的某一类。C4.5的目标是通过学习，找到一个从属性值到类别的映射关系，并且这个映射能够用于对新的类别未知的实体进行分类。 C4.5算法是对ID3算法的改进，C4.5克服了ID3的2个缺点： 用信息增益选择属性时偏向于选择分枝比较多的属性值，即取值多的属性 不能处理连续属性。 数学公式信息熵 信息熵（information entropy）是度量样本集合纯度的一种常用指标，如果一个数据集内只有同一类的标签，那么我们就说这个数据集的纯度很高。 $$Entropy(D) = -\\sum_{i=1}^{L} \\frac{|D_{i}|}{|D|} log_2 \\frac{|D_{i}|}{|D|}$$ 信息值 信息值（information value）又称为属性a的“固有值”，属性a的取值数目越多，则其越大，这样就平衡了信息增益对取值较多的属性的偏好；然而增益率又会对取值数目较少的属性有偏好，因此又有一个“启发式”的规则：先从候选划分属性中找出信息增益高于平均水平的属性，再从中选择增益率最高的。 $$IV(D, f) = -\\sum_{i=1}^{V} \\frac{|D_{i}|}{|D|} log_2 \\frac{|D_{i}|}{|D|}$$ 信息增益值 信息增益（information gain）指的是，使用某一个属性a进行划分后，所带来的纯度提高的大小。一般而言，信息增益越大，意味着使用属性a来进行划分所获得的“纯度提升”越大。 $$Gain(D, f) = Entropy(D) - \\sum_{i=1}^{V} \\frac{|D_{i}|}{|D|}Entropy(D_{i})$$ 信息增益率 信息增益率（information gain radio）的本质是在信息增益的基础之上乘上一个惩罚参数。特征个数较多时，惩罚参数较小；特征个数较少时，惩罚参数较大。 $$Gain_radio(D) = \\frac{Gain(D, f)}{IV(D, f)}$$ 逻辑步骤12345678910111213141516171819202122232425262728293031323334353637TreeGenerate(D,A): 生成节点node if D中样本全属于同一类别C: 将node标记为C类叶节点 return end if if 属性集A为空或者D的所有属性值均一样: 将node标记为最多类 return end if 从A中选取最佳划分属性a* for a in a*: 为node生成一个分支，令Dv表示D中在a*属性值为a的样本子集 if Dv为空: continue; else: TreeGenerate(Dv,A\\{a*})递归继续 end if end for Step 1: 选取特征作结点Step 2: 选取候选作条件Step 3: 作决策生成分支Step 4: 递归建立决策树Step 5: 保存决策树模型model.json1{\"V1\": {\"&lt;=0.9260963826321527\": {\"V2\": {\"&lt;=0.9630955056895321\": {\"V17\": {\"&lt;=0.401054898240464\": \"0\", \"&gt;0.401054898240464\": {\"V10\": {\"&lt;=0.9621327679155876\": {\"V14\": {\"&lt;=1.0599043959975\": {\"V5\": {\"&lt;=1.1559118351695647\": {\"V7\": {\"&lt;=1.4048794511624\": \"0\", \"&gt;1.4048794511624\": {\"Time\": {\"&lt;=135053.0\": {\"V4\": {\"&lt;=-0.387069102393921\": \"0\", \"&gt;-0.387069102393921\": {\"V3\": {\"&lt;=-1.2291843352679714\": \"0\", \"&gt;-1.2291843352679714\": {\"V6\": {\"&lt;=-0.037153262071598525\": \"0\", \"&gt;-0.037153262071598525\": \"1\"}}}}}}, \"&gt;135053.0\": \"0\"}}}}, \"&gt;1.1559118351695647\": \"0\"}}, \"&gt;1.0599043959975\": \"0\"}}, \"&gt;0.9621327679155876\": \"0\"}}}}, \"&gt;0.9630955056895321\": {\"V3\": {\"&lt;=-3.440999869353935\": {\"Time\": {\"&lt;=141818.5\": {\"V4\": {\"&lt;=0.2178224300570959\": \"0\", \"&gt;0.2178224300570959\": {\"V5\": {\"&lt;=-6.548129350703285\": \"1\", \"&gt;-6.548129350703285\": \"0\"}}}}, \"&gt;141818.5\": \"0\"}}, \"&gt;-3.440999869353935\": \"0\"}}}}, \"&gt;0.9260963826321527\": \"0\"}} model.png 数据处理连续值处理候选划分节点$$Candidate(f) = {\\frac{v^{i} + v^{i+1}}{2} | 1 \\leq i \\leq |V|-1}$$ 新信息值$$IV(D, f, c) = -\\sum_{\\lambda \\in {-, +}} \\frac{|D_{c}^{\\lambda}|}{|D|} log_2 \\frac{|D_{c}^{\\lambda}|}{|D|}$$ 新信息增益值$$Gain(D, f, c) = Entropy(D) - \\sum_{\\lambda \\in {-, +}} \\frac{|D_{c}^{\\lambda}|}{|D|}Entropy(D_{c}^{\\lambda})$$ 新信息增益率$$Gain_radio(D) = \\max_{c \\in Candidate(f)} \\frac{Gain(D, f, c)}{IV(D, f, c)}$$ 缺失值处理引入权重变量$$\\rho = \\frac{\\sum_{x \\in \\widetilde D}w_x}{\\sum_{x \\in D}w_x}\\\\widetilde p_k = \\frac{\\sum_{x \\in \\widetilde D_k}w_x}{\\sum_{x \\in \\widetilde D}w_x} (1 \\leq k \\leq |y|)\\\\widetilde r_v = \\frac{\\sum_{x \\in \\widetilde D^v}w_x}{\\sum_{x \\in \\widetilde D}w_x} (1 \\leq v \\leq V)$$ 新信息值$$IV(D, f) = \\rho \\times (- \\sum_{v=1}^{V} \\widetilde r_v \\frac{|\\widetilde D_{c}^{\\lambda}|}{|\\widetilde D|} log_2 \\frac{|\\widetilde D_{c}^{\\lambda}|}{|\\widetilde D|})$$ 新信息增益值$$Gain(D, f) = \\rho \\times (Entropy(\\widetilde D) - \\sum_{v=1}^{V} \\widetilde r_v Entropy(\\widetilde D^v))$$ 新信息增益率$$Gain_radio(D) = \\frac{Gain(D, f)}{IV(D, f)}$$ 优化调参 备注： 副标题前有”“标记的部分为优化的思路，在本次实验中并未真正实现或效果并不理想。* 剔除属性 通过seaborn模块的heatmap可视化数据样本相关性 ，删除对正负样本区分度不大的变量 在本实验中，被删除的变量为：'V8', 'V13', 'V15', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28' 减少候选 启发式原则：先从候选划分点中找出信息增益高于平均水平的属性，再从中选择信息增益率最高的。 贪婪法原则：如果出现了首个计算出信息增益率为1的候选划分点，可以认为该候选划分点已是当前特征的最优候选，继而中断后续的系列计算，开始寻找下一特征的最优候选。 *计算加速 使用thread模块编写多线程加速决策树训练。 使用GPU加速方法加速决策树训练。 剪除枝叶预剪枝预剪枝通过提前停止树的构造(比如决定在某个节点不再分裂或划分训练元组的自己)。但先剪枝有个视野效果缺点问题，也就是说在相同的标准下，也许当前扩展不能满足要求，但更进一步又能满足要求，这样会过早停止树的生长。先剪枝可通过以下方法： 当决策树达到一定的高度就停止决策树的生长。 到达节点的实例个数小于某个阈值的时候也可以停止树的生长，不足之处是不能处理那些数量比较小的特殊情况。 计算每次扩展对系统性能的增益，如果小于某个阈值就可以停止树的生长。 后剪枝后剪枝是一种全局的优化方法，在决策树构建好之后，然后才开始进行剪枝。后剪枝的过程就是删除一些子树，这个叶子节点的标识类别通过大多数原则来确定，即属于这个叶子节点下大多数样本所属的类别就是该叶子节点的标识。选择减掉哪些子树时，可以计算没有减掉子树之前的误差和减掉子树之后的误差，如果相差不大，可以将子树减掉。 *集成学习 集成多个决策树学习，提高模型分类效果。 Bagging Boosting 结果分析[验证]逻辑步骤Step 1: 预测类别Step 2: 计算指标accuracy_scoreprecision_scorerecall_scoref1_scoreroc_auc辅助工具12345from sklearn.metrics import accuracy_scorefrom sklearn.metrics import precision_scorefrom sklearn.metrics import f1_scorefrom sklearn.metrics import recall_scorefrom sklearn.metrics import roc_auc_score","link":"/2019/11/04/SCUT机器学习 (7) 决策树/"},{"title":"#Testing# HTTP的通信监控和回放：Fiddler抓包与Socket发包","text":"利用Fiddler抓包和Socket发包，并用Curl脚本统计响应时间，主要分为以下四个部分： 工具的配置及工具的使用 截获、修改、发送数据包 统计网页和元素的响应时间 需注意事项及待改进事项 任务 部署类似Microsoft PetshopWeb应用基本实例，开发性能测试小工具能截获基于IE浏览器与Web服务器的交互的数据包，修改数据包（比如简化起见，修改要搜索的关键字），再把修改后的内容使用多线程的方式发送到服务器。统计请求每个网页上主要元素（gif,css等）需要的时间，以及请求整个网页的时间。 提示： 在获取数据包的过程中要根据HTTP请求的特点，从原始的数据包中过滤出HTTP的数据包。找到提交的“搜索的关键字”，将其替换成其它字符。 发送数据包使用Socket，可以参考网络编程的资料。 方法 截获数据包 修改数据包 发送数据包 记响应时间 手段 用Fiddler截获 用Python修改 用Socket发送 用Fiddler查看 验证 可用性 易用性 并发性 工具的配置安装工具Fiddler下载地址 导入证书 勾选解码 过滤保存手动 脚本 1234567891011121314151617if (oSession.fullUrl.Contains(\"baidu.com\")) { // for(var key in oSession.oRequest.headers) { // if('Referer' === key) { if(oSession.oRequest.headers['Referer'].indexOf(\"&amp;wd=\") != -1) { var fso; var file; fso = new ActiveXObject(\"Scripting.FileSystemObject\"); file = fso.OpenTextFile(\"E:\\\\MyPrograms\\\\fiddler_sessions\\\\Session\" + new Date().getTime() + \".txt\", 8 ,true, true); // file.writeLine(\"Request url: \" + oSession.url); file.writeLine(\"Request header:\" + \"\\n\" + oSession.oRequest.headers); // file.writeLine(\"Request body: \" + oSession.GetRequestBodyAsString()); file.writeLine(\"\\n\"); file.close(); } // } // }} 设置断点手动 命令 在左下角黑框框中输入命令 停止断点：bpu 开始断点：bpu $host 工具的使用Statistics Filters Inspectors Composer AutoResponder 截获数据包图形界面 使用图形界面或编程脚本应用过滤 点击左下角 Capturing或空白处 停止或开始截获数据包 使用Statistics查看时间，使用Inspectors查看内容 使用图形界面或编程脚本保存会话 修改数据包程序脚本对于手动保存的会话 123456789101112131415161718192021222324252627282930# 替换请求中的搜索字段def get_ref(file, cont): with open(file, encoding='utf-8') as f: lines = f.readlines() for line in lines: if 'Referer' in line: start = line.find(\"&amp;wd=\") end = line.find(\"&amp;rsv_pq=\") old_str = line[start+4:end] new_str = parse.quote(cont) line = line.replace(old_str, new_str) return line# 重新拼装需发送的报文def get_req(file, cont): msg = '' with open(file, encoding='utf-8') as f: lines = f.readlines() for line in lines: if 'GET' in line: line = 'GET ' + get_ref(file, cont)[9:-1] + ' HTTP/1.1' if 'Referer' in line: line = get_ref(file, cont) if 'Accept-Encoding' in line: continue line = line.strip('\\n') + '\\r\\n' msg += line msg = bytes(msg, encoding=\"utf8\") return msg 对于自动保存的会话 1234567891011121314151617181920212223242526272829303132# 替换请求中的搜索字段def get_ref(file, cont): with open(file, encoding='utf-16') as f: lines = f.readlines() for line in lines: if 'Referer' in line: start = line.find(\"&amp;wd=\") end = line.find(\"&amp;rsv_pq=\") old_str = line[start+4:end] new_str = parse.quote(cont) line = line.replace(old_str, new_str) return line# 重新拼装需发送的报文def get_req(file, cont): msg = '' with open(file, encoding='utf-16') as f: lines = f.readlines() for line in lines: if 'Request header:' in line: continue if 'GET' in line: line = 'GET ' + get_ref(file, cont)[9:-1] + ' HTTP/1.1' if 'Referer' in line: line = get_ref(file, cont) if 'Accept-Encoding' in line: continue line = line.strip('\\n') + '\\r\\n' msg += line msg = bytes(msg[:-4], encoding=\"utf8\") return msg 发送数据包Fiddler使用WebForms 使用图形界面或编程脚本应用过滤 使用图形界面或运行命令设置断点 在 对应报文A 的 Request WebForms内修改“搜索关键字” 点击 Break on Response 将修改后的 对应报文A 发送到Fiddler 在 对应报文B 的 Request WebForms内查看“搜索关键字” 点击 Run to Completion 将修改后的 对应报文B 发送到Server 使用Composer 保存会话Request请求头部 在记事本内修改“搜索关键字” 在Composer内发送请求报文 Socket 123456789101112131415161718192021222324252627282930if __name__ == '__main__': # 读取信息 file = input(\"file:\") cont = input(\"cont:\") # 套接字连接服务端 s = ssl.wrap_socket(socket.socket()) s.connect(('www.baidu.com', 443)) # 发送修改后的请求 s.send(get_req(file, cont)) # 缓存服务端的响应 buffer = [] while True: d = s.recv(1024) if d: buffer.append(d) else: break res = b''.join(buffer) # 客户端关闭套接字 s.close() # 保存响应 header, html = res.split(b'\\r\\n\\r\\n', 1) print(header.decode('utf-8')) with open(cont + '.html', 'wb') as f: f.write(html) 记响应时间FiddlerPyCurlUrllibRequest实例的演示 [仅使用Fiddler抓包、修改、发包](录屏链接To be continue…) [Fiddler抓包+Python修改+Socket发包](录屏链接To be continue…) 需注意事项报文格式 无论使手动还是脚本保存会话的请求报文，都需要注意每个属性是否以 \\r\\n 结尾，最后属性是否以 \\r\\n\\r\\n 结尾 遇到 HTTP 400 Bad Request 响应仔细检查报文格式是否正确 编码问题 注意保存会话的编码格式，手动保存使用编码格式 utf-8 ，脚本保存使用编码格式 utf-16 Socket发送报文和接受报文都需要二进制数据 Fiddler默认使用GZip格式压缩，在发送请求报文时为确保响应主题非乱码，应该去除 Accept-Encoding: gzip, deflate 这行属性 端口问题 Socket通信需要知道主机地址及其端口号 Fiddler Sessions或Inpectors可知主机地址及其端口号 保存的TCP报文（使用Wireshark）可知主机地址及其端口号 保存的HTTP/HTTPS报文（使用Fiddler）仅知主机地址，已知常用端口：HTTP为80/HTTPS为443 请求变化 Break on Response 和 Run to Completion 对应会话并不相同 待改进事项 优化过滤会话和替换内容脚本（正则表达式） 发送响应回浏览器（Socket向其它进程发报文） 持续化、多线程抓包、修改、发包（多线程编程）","link":"/2019/10/11/HTTP的通信监控和回放：Fiddler抓包与Socket发包/"},{"title":"#Configuration# 从零到壹：GitHub Pages + Hexo = Blog","text":"利用GitHub Pages+Hexo打造一个个人博客，主要分为以下五个部分： 环境准备 Environment 文件配置 Configuration 个性化 Customization 博客写作 Writing 双备份 Backup 环境准备 Environment 安装Git + Github 安装Node.js 安装Hexo 文件设置 Configuration 本地运行 远程运行 基本配置 /_config.yml 个性选项 Customization 基本配置 /themes/icarus/_config.yml 博客写作 Writing 博客备份 Backup 待办事项 Todos 环境准备 Environment安装Git + Github 安装Git部署插件: 1$ npm install hexo-deployer-git --save 安装Node.js 安装Node.js: Download | Node.js 检查是否安装成功: 12$ node -v$ npm -v 安装Hexo 安装Hexo: 1$ npm install -g hexo-cli 检查是否安装成功: 1$ hexo -v 初始化: 1$ hexo init blog 文件设置 Configuration本地运行123$ hexo clean # 删除缓存$ hexo g # 生成Hexo页面$ hexo s # 本地部署Hexo页面 远程运行123$ hexo clean # 删除缓存$ hexo g # 生成Hexo页面$ hexo d # 远程部署Hexo页面 基本配置/_config.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: LotteWong's Blog # 个人博客主标题subtitle: 在代码符号表象中避难。 # 个人博客副标题description: # 搜索引擎描述词keywords: # 搜索引擎关键词author: LotteWong # 作者名称avatar: ./public/images/avatar.png # 作者头像language: en # 网站语言timezone: Asia/Shanghai # 网站时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://lottewong.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: source # 文章目录public_dir: public # 素材目录tag_dir: tags # 标签目录archive_dir: archives # 归档目录category_dir: categories # 分类目录code_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/plugins: # 设置个人博客插件theme: icarus # 设置个人博客主题# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # 部署类型 repo: git@github.com:LotteWong/lottewong.github.io.git # 部署仓库 branch: master # 部署分支 个性选项 Customization基本配置/themes/icarus/_config.yml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225# Version of the Icarus theme that is currently usedversion: 2.3.0# Path or URL to the website's iconfavicon: /images/favicon.ico# Path or URL to RSS atom.xmlrss: ./atom.xml# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.png# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID # fb_app_id: # Facebook Admin ID # fb_admins: # Twitter ID # twitter_id: # Twitter site # twitter_site: # Google+ profile link # google_plus: # Navigation bar link settings 顶部栏设置navbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # Navigation bar links to be shown on the right links: Email: icon: far fa-envelope-open url: mailto:lottewong21@gmail.com# Footer section link settings 页尾栏设置footer: # Links to be shown on the right of the footer section links: GitHub: icon: fab fa-github url: 'https://github.com/LotteWong' RSS: icon: fas fa-rss url: /atom.xml# Sidebar settings. 侧边栏设置# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings 侧边栏设置# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: LotteWong # Title of the author to be shown in the profile widget author_title: SCUT, Undergraduate # Author's current location to be shown in the profile widget location: Guangzhou, China # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/LotteWong' # Links to be shown on the bottom of the profile widget social_links: Organization: icon: fas fa-sitemap url: 'https://github.com/SCUTMSC' Project: icon: fas fa-project-diagram url: 'https://github.com/scutse-man-month-myth/InkYear' - # Widget name type: toc # Where should the widget be placed, left or right position: left - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Bokjan: 'https://bokjan.com/' Kingsley: 'https://kingsleyxie.cn/' sticnarf: 'https://sticnarf.me/' ahalims: 'https://ahalims.github.io/' xcw: 'https://yifanyu123.github.io/' - # Widget name type: archive # Where should the widget be placed, left or right position: left - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right - # Widget name type: category # Where should the widget be placed, left or right position: right - # Widget name type: tag # Where should the widget be placed, left or right position: right# Article display settingsarticle: highlight: atom-one-light # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles # theme: atom-one-light # Show code copying button # clipboard: true # Default folding status of the code blocks. Can be \"\", \"folded\", \"unfolded\" # fold: unfolded # Whether to show article thumbnail images thumbnail: true # Whether to show estimate article reading time readtime: true# Search plugin settings 搜索功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Searchsearch: # Name of the search plugin type: insight# Comment plugin settings 评论功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Commentcomment: # Name of the comment plugin type: # Donation entries 打赏功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: # - # Donation entry name # type: alipay # Qrcode image URL # qrcode: '/images/alipay.png' # - # Donation entry name # type: wechat # Qrcode image URL # qrcode: '/images/wechat.png' # - # Donation entry name # type: paypal # Paypal business ID or email address # business: 'SuperGsama@outlook.com' # Currency code # currency_code: USD# Share plugin settings 分享功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name type: # Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: true # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: # Baidu Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar hotjar: # Hotjar site id site_id: # Show a loading progress bar at top of the page progressbar: true # Show the copy button in the highlighted code area clipboard: true # BuSuanZi site/page view counter # https://busuanzi.ibruce.info busuanzi: true# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 博客写作 Writing 默认 1$ hexo new \"blog title\" 自定义 1234567891011121314title: {{ blog title }}categories: {{ blog category }}tags:- {{ blog tag }}date: {{ YYYY-MM-DD HH:MM:SS }}thumbnail: {{ blog thumbnail }}{{ Abstract }}&lt;!-- more --&gt;&lt;!-- toc --&gt;{{ Content }} 博客备份 Backup Hexo备份: 12# master branch$ hexo d Code备份: 12345# dev branch$ git checkout dev$ git add --all$ git commit -m \"new blog\"$ git push origin dev 待办事项 Todos 对应图标 更多插件 绑定域名 更新外链","link":"/2019/06/02/从零到壹：GitHub Pages + Hexo = Blog/"}],"tags":[{"name":"Machine Learning","slug":"Machine-Learning","link":"/tags/Machine-Learning/"},{"name":"Fiddler","slug":"Fiddler","link":"/tags/Fiddler/"},{"name":"Curl","slug":"Curl","link":"/tags/Curl/"},{"name":"Socket","slug":"Socket","link":"/tags/Socket/"},{"name":"GitHub Pages","slug":"GitHub-Pages","link":"/tags/GitHub-Pages/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[{"name":"Artificial Intelligence","slug":"Artificial-Intelligence","link":"/categories/Artificial-Intelligence/"},{"name":"Sucks","slug":"Sucks","link":"/categories/Sucks/"},{"name":"Testing","slug":"Testing","link":"/categories/Testing/"},{"name":"Configuration","slug":"Configuration","link":"/categories/Configuration/"}]}
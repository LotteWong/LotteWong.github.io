{"pages":[{"title":"About Me","text":"程序员小黄，SCUTSE大数据方向本科在读，M$ Club技术部指定背锅位，会吃福建人的广东人，面临90后中年危机，爱的人都叫夏洛特。","link":"/about/index.html"}],"posts":[{"title":"#Operation# WSL从入门到...(1) WSL 1 vs WSL 2","text":"对比适用于 Linux 的 Windows 子系统（Windows Subsystem for Linux, WSL）的两个版本 - WSL 1 和 WSL 2 ，主要分为以下六个部分： 前情提要 相关简介 性能对比 架构对比 几点总结 参考链接 目录 Table of Contents 前情提要 相关简介 性能对比 File system performance Full system call compatibility 架构对比 WSL 1 WSL 2 Linux Kernel Virtualization 几点总结 参考链接 前情提要 前阵网上冲浪围观 M$ Build 2019 的 WSL Session ，感受了一波 Microsoft ❤ Open Source，遂决定根据讲座和文档内容当一回复读机讨论一下 WSL ( 啊我的塑料英语_(:з)∠)_。 相关简介 The Windows Subsystem for Linux lets developers run a GNU/Linux environment – including most command-line tools, utilities, and applications – directly on Windows, unmodified, without the overhead of a virtual machine. 适用于 Linux 的 Windows 子系统（Windows Subsystem for Linux, WSL）可以简单地理解为在 Windows 上提供了运行 Linux 的平台。由于是 Subsystem ，与裸机装 Linux Distribution 相比，存在功能限制和性能打折的情况。 You can: …… Invoke Windows applications using a Unix-like command-line shell. Invoke GNU/Linux applications on Windows. …… 对于懒得开虚拟机or装双系统 + ECS渣渣级配置 + 非尊贵苹果用户而言， WSL 还是很有吸引力的 (虽然也很多坑。除了对 Linux 本身有需求外，上面提到的 Windows 和 Linux 互相invoke 也很有意思， WSL 因此大大降低了原本配置两个文件系统的繁琐程度。 性能对比 WSL 2 相比 WSL 1，主要优化了访问文件系统的速度以及提供了更完整的系统调用接口。 File system performance Full system call compatibility 架构对比WSL 1 WSL 1 的大体思路是，在一台 Windows 主机上安装 Linux 发行版本，依赖中间层的驱动器完成 Linux Namespace 和 Windows Kernel 之间的通信捕获和指令翻译（比如 path 和 flag ），作用范围包括但不局限于系统调用、文件系统、权限管理和网络配置等。 这样的设计存在一些缺陷： 某些翻译无可避免地需要付出时空代价，甚至由于两种内核的设计思想存在冲突而无法进行。 由于 Linux Kernel 更新得非常快，单靠 M$ Team 自己实现翻译，开发进度远远滞后于实际生产需求。 【更多详见 👉 WSL从入门到…(2) Dive into WSL 1 // 其实还没有写】 WSL 2 WSL 2 的大体思路是，开启 Hyper-V 功能，Windows Hyper-V Container（包含Windows Kernel和Windows Usermode）持续运行，Linux Hyper-V Container（包含Linux Kernel和Linux Usermode）随用随开，两者通过 Socket 通信。 这样的设计存在一些缺陷： 需要处理器提供虚拟化选项，一些 arm64 架构的芯片不支持该功能。 Windows 开Hyper-V后将无法同时运行 VMware 和 Virtual Box 等工具，因为它们都要求独占 Hypervisor 才能够运行。 虚拟化伴随一系列一致性问题，比如权限管理和网络配置等等。 【更多详见 👉 WSL从入门到…(3) Dive into WSL 2 // 其实还没有写】 Linux Kernel 用 Linux Kernel 是为了解决 WSL 1 的遗留问题（“Uses real Linux kernel for improved performance and perfect compatibility”），翻译不好搞就“拿来主义”。 M$ 甚至为 WSL 2 定制了 Linux Kernel (没想到吧.jpg Virtualization 要使两种内核能够共存最直接的思路就是使用虚拟化技术，而 WSL 2 采用了一种有别于传统虚拟机和新兴容器的新(?)方法 - Lightweight utility VM，其特点是集成度高（关联 Windows 服务）且只在运行时启动（否则被销毁回收）。 相比传统虚拟机，内存占用更小、启动速度更快以及可以同时运行更多实例。 相比新兴容器，基于 Hyper-V 面向 server 场景，本质还是 VM ，隔离得更彻底。 几点总结 根据PM的说法， WSL 1 和 WSL 2 会并行维护，既适用于桌面版也可以运行在服务器。下面简单回顾两者的区别： WSL 1 WSL 2 核心技术 Pico provider drivers Lightweight utility VM 同一实例（Container） ✓ ✗ 额外支持（虚拟化） ✗ ✓ 文件系统 访问慢 访问快 系统调用 缺少 完整 权限管理 相同 不同 网络配置 相同 不同 后续两节将分别再深入介绍 WSL 1 和 WSL 2的实现细节。那么我先占坑逃了（（（ 参考链接 The new Windows subsystem for Linux architecture: a deep dive Windows Subsystem for Linux Documentation","link":"/2019/12/12/WSL从入门到...(1)/"},{"title":"#Sucks# 写在二零二零","text":"（（（无聊的吐槽与没多少意思的复读 生活大概就是，起落落落。 说来写前端也快一个月，虽然以后大概率也不会再专门帮别人写了，但是这个过程还是有不少心得体会，比如理解需求、读懂架构、实现逻辑、保证质量和通过测试之类的。因为开发得比较随心所欲，换句话说，就是还有很多成长的空间，非常感谢实验室的师兄师姐没有嫌弃我这个小菜🐓，黄老师还即将迎来人生第一桶金 (?) 要说后悔到印象深刻的事情，除了在GY咕咕掉了信息竞赛，选大数据可能也是之一。无非就是不会也不那么感兴趣，每次先被数据处理套路一阵，然后对着数学公式和神经网络敲敲敲，Debug没有机器也要来个地久天长，还要盯着AB榜患得患失，实在是搞不来啦。虽然但是，学算法这半年来最大的收获就是学会如何心平气和地把一件事情真正做得又快又好（我却还没有 过去一年搞了不少副业，真正有营养的却不多，从C++写到Dart，从全栈写到云计算…明白一个人的精力其实很有限，什么都干 ≈ 什么都没干。就算开了n个repo，混了n个project，挂了n个title，只要面对 Talk is cheap, show me the code 也会沉默。当然广度优先学习也没什么不好，只不过是我算力太弱了罢。到了三年级就不可避免地想东想西，不能再像从前一样说干就干，要考虑沉默成本，要面对同伴焦虑，决定去哪搬砖也要小心翼翼，还随时在敏捷和投机的边缘试探。最后说服了自己还是保持刮刮乐的心态…（刮到了云计算还挺幸运的 误 虽然以上都是些无关痛痒的吐槽，生活也还有它的复杂和美好，诸如和很长一段时间被gaslight的自己和解啦、第一次当PM啦、去M$RA蹭吃蹭喝啦、再见好X友发展革命情谊啦、无疾而终地暗恋过啦云云，这种时候还是要感慨年轻真好滴嘻嘻 :P 以前觉得生活本质就是和西西弗斯神话一样的，相当虚无。现在也还是这么觉得，不过直觉上有趣的事情那么多，每天一点点也足够快乐。一般来说，新年之交讲的东西都不能信，就不继续一本正经胡说八道了，最后以小波作结吧： “那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想再一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。”","link":"/2020/01/01/写在二零二零/"},{"title":"#Testing# HTTP的通信监控和回放：Fiddler抓包与Socket发包","text":"利用Fiddler抓包和Socket发包，并用Curl统计响应时间，主要分为以下四个部分： 工具的配置及工具的使用 截获、修改、发送数据包 统计网页和元素的响应时间 需注意事项及待改进事项 目录 Table of Contents 任务 Task 工具的配置 Configuration 安装工具 勾选解码 过滤保存 设置断点 工具的使用 Usage Statistics Filters Inspectors Composer AutoResponder 截获数据包 Capture 图形界面 修改数据包 Modify 程序脚本 发送数据包 Send Fiddler Socket 记响应时间 Analyses Fiddler Curl 需注意事项 Notices 待改进事项 Todos 任务 Task 部署类似Microsoft PetshopWeb应用基本实例，开发性能测试小工具能截获基于IE浏览器与Web服务器的交互的数据包，修改数据包（比如简化起见，修改要搜索的关键字），再把修改后的内容使用多线程的方式发送到服务器。统计请求每个网页上主要元素（gif,css等）需要的时间，以及请求整个网页的时间。 提示： 在获取数据包的过程中要根据HTTP请求的特点，从原始的数据包中过滤出HTTP的数据包。找到提交的“搜索的关键字”，将其替换成其它字符。 发送数据包使用Socket，可以参考网络编程的资料。 工具的配置 Configuration安装工具Fiddler下载地址 勾选解码 过滤保存 手动 脚本 1234567891011121314151617if (oSession.fullUrl.Contains(\"baidu.com\")) { // for(var key in oSession.oRequest.headers) { // if('Referer' === key) { if(oSession.oRequest.headers['Referer'].indexOf(\"&amp;wd=\") != -1) { var fso; var file; fso = new ActiveXObject(\"Scripting.FileSystemObject\"); file = fso.OpenTextFile(\"E:\\\\MyPrograms\\\\fiddler_sessions\\\\Session\" + new Date().getTime() + \".txt\", 8 ,true, true); // file.writeLine(\"Request url: \" + oSession.url); file.writeLine(\"Request header:\" + \"\\n\" + oSession.oRequest.headers); // file.writeLine(\"Request body: \" + oSession.GetRequestBodyAsString()); file.writeLine(\"\\n\"); file.close(); } // } // }} 设置断点 手动 命令 在左下角黑框框中输入命令 停止断点：bpu 开始断点：bpu $host 工具的使用 UsageStatistics Filters Inspectors Composer AutoResponder 截获数据包 Capture图形界面 使用图形界面或编程脚本应用过滤 点击左下角 Capturing或空白处 停止或开始截获数据包 使用Statistics查看时间，使用Inspectors查看内容 使用图形界面或编程脚本保存会话 修改数据包 Modify程序脚本 对于手动保存的会话 123456789101112131415161718192021222324252627282930# 替换请求中的搜索字段def get_ref(file, cont): with open(file, encoding='utf-8') as f: lines = f.readlines() for line in lines: if 'Referer' in line: start = line.find(\"&amp;wd=\") end = line.find(\"&amp;rsv_pq=\") old_str = line[start+4:end] new_str = parse.quote(cont) line = line.replace(old_str, new_str) return line# 重新拼装需发送的报文def get_req(file, cont): msg = '' with open(file, encoding='utf-8') as f: lines = f.readlines() for line in lines: if 'GET' in line: line = 'GET ' + get_ref(file, cont)[9:-1] + ' HTTP/1.1' if 'Referer' in line: line = get_ref(file, cont) if 'Accept-Encoding' in line: continue line = line.strip('\\n') + '\\r\\n' msg += line msg = bytes(msg, encoding=\"utf8\") return msg 对于自动保存的会话 1234567891011121314151617181920212223242526272829303132# 替换请求中的搜索字段def get_ref(file, cont): with open(file, encoding='utf-16') as f: lines = f.readlines() for line in lines: if 'Referer' in line: start = line.find(\"&amp;wd=\") end = line.find(\"&amp;rsv_pq=\") old_str = line[start+4:end] new_str = parse.quote(cont) line = line.replace(old_str, new_str) return line# 重新拼装需发送的报文def get_req(file, cont): msg = '' with open(file, encoding='utf-16') as f: lines = f.readlines() for line in lines: if 'Request header:' in line: continue if 'GET' in line: line = 'GET ' + get_ref(file, cont)[9:-1] + ' HTTP/1.1' if 'Referer' in line: line = get_ref(file, cont) if 'Accept-Encoding' in line: continue line = line.strip('\\n') + '\\r\\n' msg += line msg = bytes(msg[:-4], encoding=\"utf8\") return msg 发送数据包 SendFiddler 使用WebForms 使用图形界面或编程脚本应用过滤 使用图形界面或运行命令设置断点 在 对应报文A 的 Request WebForms内修改“搜索关键字” 点击 Break on Response 将修改后的 对应报文A 发送到Fiddler 在 对应报文B 的 Request WebForms内查看“搜索关键字” 点击 Run to Completion 将修改后的 对应报文B 发送到Server 使用Composer 保存会话Request请求头部 在记事本内修改“搜索关键字” 在Composer内发送请求报文 Socket 123456789101112131415161718192021222324252627282930if __name__ == '__main__': # 读取信息 file = input(\"file:\") cont = input(\"cont:\") # 套接字连接服务端 s = ssl.wrap_socket(socket.socket()) s.connect(('www.baidu.com', 443)) # 发送修改后的请求 s.send(get_req(file, cont)) # 缓存服务端的响应 buffer = [] while True: d = s.recv(1024) if d: buffer.append(d) else: break res = b''.join(buffer) # 客户端关闭套接字 s.close() # 保存响应 header, html = res.split(b'\\r\\n\\r\\n', 1) print(header.decode('utf-8')) with open(cont + '.html', 'wb') as f: f.write(html) 记响应时间 AnalysesFiddlerCurl需注意事项 Notices 报文格式 无论使手动还是脚本保存会话的请求报文，都需要注意每个属性是否以 \\r\\n 结尾，最后属性是否以 \\r\\n\\r\\n 结尾 遇到 HTTP 400 Bad Request 响应仔细检查报文格式是否正确 编码问题 注意保存会话的编码格式，手动保存使用编码格式 utf-8 ，脚本保存使用编码格式 utf-16 Socket发送报文和接受报文都需要二进制数据 Fiddler默认使用GZip格式压缩，在发送请求报文时为确保响应主题非乱码，应该去除 Accept-Encoding: gzip, deflate 这行属性 端口问题 Socket通信需要知道主机地址及其端口号 Fiddler Sessions或Inpectors可知主机地址及其端口号 保存的TCP报文（使用Wireshark）可知主机地址及其端口号 保存的HTTP/HTTPS报文（使用Fiddler）仅知主机地址，已知常用端口：HTTP为80/HTTPS为443 请求变化 Break on Response 和 Run to Completion 对应会话并不相同 待改进事项 Todos 优化过滤会话和替换内容脚本：正则表达式 发送响应回浏览器：Socket向其它进程发报文 持续化、多线程抓包、修改、发包：多线程编程 实现替代Fiddler的代理服务器：利用Python第三方代理库","link":"/2019/10/15/HTTP的通信监控和回放：Fiddler抓包与Socket发包/"},{"title":"#Cloud Computing# LinuxOne上的Docker初体验","text":"在LinuxOne上利用Docker部署应用与服务，主要分为以下五个部分： 环境准备 Environment Docker原理 Theory Docker使用 Usage Docker实战 Practice 注意事项 Notices 目录 Table of Contents 环境准备 Environment 申请Github账号并配置好本地Git 申请IBM ID账号并开通开发者账号 申请IBM LinuxOne账号 Virtual Machine Private Cloud 安装Node.js环境 安装SSH登录工具 Docker原理 Theory 工作流程 名词辨析 Docker使用 Usage 安装 命令 Docker实战 Practice 切换权限和路径，配置用户习惯 安装并运行 WebSphere Liberty（练习使用docker run） 安装并运行 WordPress（练习使用docker-compose up） 安装并运行 Todo App（熟悉MEAN Stack + Docker架构） Todo App前端插入数据、后端处理数据、数据库查数据（熟悉MEAN Stack + Docker前后端数据库交互） 本地部署金融微服务（熟悉Localhost → Micro-services模式） 远程部署金融微服务（熟悉Docker → Micro-services模式） 云端部署金融微服务（熟悉Cloud → Micro-services模式） 注意事项 Notices 环境准备 Environment申请Github账号并配置好本地Git 廖雪峰Git教程 申请IBM ID账号并开通开发者账号 该步骤主要提供接口权限 Register IBM ID （统一邮箱） Create an API Developer Portal account （统一邮箱） Apps Create new App Configure the App: Title: $TITLE Sumbit Client ID Client Secret API Products Use banking API Subscribe Default Plan Select Previous App Subscribe 申请IBM LinuxOne账号 该步骤主要提供部署环境 Virtual Machine Login Virtual Services Manage Instances Create Instances Configure the Instance Type: General purpose VM Instance Name: $INSTANCE_NAME Instance Description: $INSTANCE_DESCRITION Image: RHEL7.6 SSH Key Pairs: Create → Save → Select → Create Check the Instance Status: Active Linux User: linux1 IP Address: 148.100.xxx.xxx Private Cloud Login Catalog openmplbank Configure Input Release name Select Target Namespace Install View Helm Release Deployment AVAILABLE = 1 Launch 安装Node.js环境 安装Node.js: Download | Node.js 检查是否安装成功: 12$ node -v$ npm -v 安装SSH登录工具 Windows：可选PuTTY或Xshell或WSL Linux：ssh -i /path/to/key/keyname.pem linuxusername@serveripaddress Docker原理 Theory工作流程 名词辨析 概念 含义 Docker 镜像(Images) Docker镜像是用于创建Docker容器的模板。 Docker 容器(Container) Docker容器是独立运行的一个或一组应用。 Docker 客户端(Client) Docker客户端通过命令行或者其他工具使用Docker API，与Docker的守护进程通信。 Docker 主机(Host) Docker主机是一个物理或者虚拟的机器用于执行Docker守护进程和容器。 Docker使用 Usage安装 安装docker 123456789101112# 下载Docker归档包wget ftp://ftp.unicamp.br/pub/linuxpatch/s390x/redhat/rhel7.3/docker-17.05.0-ce-rhel7.3-20170523.tar.gz# 解压Docker归档包tar -xzvf docker-17.05.0-ce-rhel7.3-20170523.tar.gz# 迁移Docker归档包# !!! 这里直接cp到/usr/bin就好，因为/usr/local/bin不在PATH环境变量里 !!!cp docker-17.05.0-ce-rhel7.3-20170523/docker* /usr/bin/ 安装docker-compose 12345678910111213141516171819202122232425262728293031# 查看python-setuptoolsyum info python-setuptools# 安装python-setuptoolsyum install -y python-setuptools# 安装pipeasy_install pip# 网速过慢的话先禁用掉 IPv6echo 1 &gt; /proc/sys/net/ipv6/conf/all/disable_ipv6# 升级backports.ssl_match_hostnamepip install backports.ssl_match_hostname --upgrade --ignore-installed# 先安装依赖，不然会报错yum install python-devel libffi-devel# 安装docker-composepip install docker-compose==1.13.0# 查看docker-compose安装情况和版本信息docker-compose version 命令 后台启动daemon进程 1234# -g 设置Docker Daemon运行时的根目录# &amp; 放在命令后面表示设置此进程为后台进程docker daemon -g /local/docker/lib &amp; 命令查看docker信息 1234567# 查看当前机器docker版本老旧docker version# 检查后台有无docker进程运行ps aux | grep docker docker镜像处理 1234567891011# 查看所有镜像docker images# 拉取远程镜像docker image pull repository:tag# 构建本地镜像docker build -t \"repository:tag\" ./ docker容器处理 1234567891011# 查看所有容器docker ps# 创建运行容器docker run image# 停止运行容器docker stop container docker服务处理 1234567891011# 查看所有服务docker-compose ps# 创建运行服务docker-compose up# 停止运行服务docker-compose down docker build 123# -t 在新容器内指定一个伪终端或终端docker build -t \"repository:tag\" ./ docker run 12345# -d 开启daemon模式# -i 允许你对容器内的标准输入 (STDIN) 进行交互# -p 指定端口映射规则docker run -d -i -p ipadress1:port1/protocal:ipadress2:port2/protocal repository:tag docker-compose up 1234# -d 开启daemon模式# 端口映射和镜像来源都写在了.yml配置文件docker-compose up -d docker exec 1234# -i 允许你对容器内的标准输入 (STDIN) 进行交互# -t 在新容器内指定一个伪终端或终端docker exec –it container bash Docker实战 Practice切换权限和路径，配置用户习惯123456789101112131415# 切为根用户，否则没有权限sudo su# 切到家目录，否则难找文件cd ~# RHEL 7.6已经自带安装了VIM 7.4，启动命令是vi，习惯用vim命令的同学可以先设置一下别名[当前生效]alias vim='vi'# RHEL 7.6已经自带安装了VIM 7.4，启动命令是vi，习惯用vim命令的同学可以先设置一下别名[永久生效]# !!! 可以将alias vim='vi'加到~/.bashrc中 !!!source ~/.bashrc 安装并运行 WebSphere Liberty（练习使用docker run）123456789# 手动拉取websphere-liberty镜像到本地docker image pull s390x/websphere-liberty:webProfile7# 后台运行容器，并指定端口映射规则docker run -d -p 80:9080 -p 443:9443 s390x/websphere-liberty:webProfile7# 浏览器访问http://[LinuxOne Host IP]，即可看到WebSphere Liberty的界面 安装并运行 WordPress（练习使用docker-compose up）12345678910111213141516171819202122232425262728293031323334353637383940# 创建docker-compose.ymlvim docker-compose.yml# 编辑docker-compose.ymlversion: '2'services: wordpress: image: s390x/wordpress ports: - 8080:80 # 将本地 8080 端口映射到容器的 80 端口 environment: WORDPRESS_DB_PASSWORD: example mysql: image: brunswickheads/mariadb-5.5-s390x environment: MYSQL_ROOT_PASSWORD: example:wq# 查看docker-compose.ymlcat docker-compose.yml# 创建wordpress目录方便整理mkdir wordpressmv docker-compose.yml wordpress/cd wordpress/# 根据docker-compose.yml中定义的服务启动容器docker-compose up -d# 创建完成后，查看相关容器的状态docker-compose ps# 浏览器访问http://[Your LinuxONE IP Address]:8080，即可看到 WordPress 的页面 安装并运行 Todo App（熟悉MEAN Stack + Docker架构）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101# 为方便管理文件，切换到家目录cd ~# 从Github拉取源码到本地使用git clone https://github.com/IBM/Cloud-Native-Workloads-on-LinuxONE# 迁移源码文件夹到家目录cp -r Cloud-Native-Workloads-on-LinuxONE/files/mean-docker ./# 安装显示目录树的插件包yum install -y tree# 显示mean-docker的目录树tree mean-dockermean-docker├── docker-compose.yml # docker-compose 配置文件├── express-server│ ├── app│ │ ├── models│ │ │ └── todo.js│ │ └── routes.js│ ├── config│ │ └── database.js│ ├── Dockerfile # docker image 生成文件│ ├── license│ ├── package.json│ ├── public│ │ ├── index.html # 前端文件│ │ └── js│ │ ├── controllers│ │ │ └── main.js # 后端文件│ │ ├── core.js│ │ └── services│ │ └── todos.js # 数据库文件│ ├── README.md│ └── server.js└── README.md # 说明文档8 directories, 14 files# 修改Angular.js成国内镜像源vim mean-docker/express-server/public/index.htmlsrc=\"//cdn.bootcss.com/angular.js/1.2.16/angular.min.js\"# 查看Dockerfile的内容cd express-server/lsvim Dockerfile# 编辑Dockerfile的内容# Expose the port the app runs inEXPOSE 8081......# Express listening portENV PORT 8081:wq# 重新构建镜像cd mean-dockerdocker-compose down # 停止正在运行的容器docker-compose build # 先重新构建镜像docker-compose up # 再基于新镜像重新启动容器# 查看docker-compose.yml的内容cd mean-docker/lsvim docker-compose.yml# 编辑docker-compose.yml的内容# 因为之前本地的8080端口被 WordPress 占用了，所以这里我们使用8081端口......ports:- \"8081:8081\" # 本地 8081 端口映射到 express 容器的 8081 端口......:wq# 启动指定服务docker-compose up -d# 使用docker-compose ps命令查看启动的容器docker-compose ps# 浏览器访问http://[ip of machine]:8081，即可看到你的 TODO-List App Todo App前端插入数据、后端处理数据、数据库查数据（熟悉MEAN Stack + Docker前后端数据库交互）1234567891011121314151617181920212223242526272829......# 在运行的容器中执行命令docker exec –it meandocker_database_1 bash# 进入MongoDB&gt; mongo# 查看数据库&gt; show dbs# 指定数据库&gt; use docker-mean# 枚举数据表&gt; show tables# 查看元祖集&gt; db.todos.find()# 指定元祖项&gt; db.todos.find({\"key\": \"value\"}) 本地部署金融微服务（熟悉Localhost → Micro-services模式）12345678910111213141516171819202122232425# Fork ICp-banking-microservices 到自己账号下，将你Fork的项目git clone至本地# Github配置过SSHgit clone git@github.com:LotteWong/ICp-banking-microservices.git# Github未配置SSHgit clone https://github.com/YOUR_USERNAME/ICp-banking-microservices# 在banking-application/public/js/bankingAPI.js中填入你的Client ID和Client Secret# 进入ICp-banking-microservices/banking-application目录，安装npm依赖npm install# 如果出现npm代理设置错误，重新设置代理即可npm config set registry \"http://registry.npmjs.org/\"# 进入ICp-banking-microservices/banking-application目录，启动应用node app.js# 浏览器访问http://localhost:3000，即可访问应用# 随便选择一个customer ID测试，若有JSON格式的数据返回，则说明API可用。如果出错可自排查，可能是ID和Secret不匹配（前往开发者页面的应用程序页面中验证ID和Secret）或者浏览器不支持网速较慢之类（更换浏览器更换网络源） 远程部署金融微服务（熟悉Docker → Micro-services模式）1234567891011121314151617181920212223242526272829303132333435363738# 在非 LinuxOne 的本机将项目推送至 Github 远程仓库# !!! 实际上不应该把Client ID和Client Secret这种密钥类型的数据推到 Github 上，这里为了方便实验暂时这么做，以后切勿模仿。 !!!git add public/js/bankingAPI.jsgit commit -m \"Update of bankingAPI.js\"git push origin master# 先登录你的 LinuxONE 主机实例，为方便管理文件，切换到家目录cd ~# 将你 Fork 后又更新的代码拉取到本地# Github配置过SSHgit clone git@github.com:LotteWong/ICp-banking-microservices.git# Github未配置SSHgit clone https://github.com/YOUR_USERNAME/ICp-banking-microservices# 构建 Docker 镜像docker build -t \"respository:tag\" ./# 查看 Docker 镜像docker images# 启动 Docker 容器docker run -p 3000:3000 respository:tag# 查看 Docker 容器docker ps# 浏览器访问http://[LinuxOne Host IP]:3000，即可访问应用# 随便选择一个customer ID测试，若有JSON格式的数据返回，则说明API可用。如果出错可自排查，可能是ID和Secret不匹配（前往开发者页面的应用程序页面中验证ID和Secret）或者浏览器不支持网速较慢之类（更换浏览器更换网络源） 云端部署金融微服务（熟悉Cloud → Micro-services模式）123# 到 ICP 中部署好的应用，点击启动，浏览器会自动跳转到分配的端口# 之后就和此前的实验一样了，只不过你的应用是部署在 ICP 上，由 Kubernetes 自动维护可用的 Pod 数量 注意事项 Notices 端口映射就是将主机的IP地址的一个端口映射到局域网中一台机器，当用户访问这个IP的这个端口时，服务器自动将请求映射到对应局域网分机。 .pem为通用证书格式，ppk为PuTTY下面的专有格式。两者都为SSH Key Pairs格式，内含公钥和密钥。 镜像是类，容器是对象，服务是对象集。Dockerfile用于构建镜像；docker-compose.yml用于组织镜像；docker run用于启动容器；docker-compose up用于启动服务。 使用Docker需要非常注意卷的管理，如果采用默认匿名的方式而不指定卷的位置，服务器的容量很快就会被每次重新生成的同一镜像给爆掉。 MEAN Stack包括MongoDB（数据库）、Express.js（路由）、AngularJS（前端）和Node.js（后端）。本次实验最终项目友链 👉 SCUT Online Bank Application。","link":"/2019/06/18/LinuxOne上的Docker实践/"},{"title":"#Configuration# 从零到壹：GitHub Pages + Hexo = Blog","text":"利用GitHub Pages+Hexo打造一个个人博客，主要分为以下五个部分： 环境准备 Environment 文件设置 Configuration 个性选项 Customization 博客写作 Writing 博客备份 Backup 目录 Table of Contents 环境准备 Environment 安装Git + Github 安装Node.js 安装Hexo 文件设置 Configuration 本地运行 远程运行 基本配置 个性选项 Customization 基本配置 博客写作 Writing 博客备份 Backup 待办事项 Todos 环境准备 Environment安装Git + Github 安装Git部署插件: 1$ npm install hexo-deployer-git --save 安装Node.js 安装Node.js: Download | Node.js 检查是否安装成功: 12$ node -v$ npm -v 安装Hexo 安装Hexo: 1$ npm install -g hexo-cli 检查是否安装成功: 1$ hexo -v 初始化: 1$ hexo init blog 文件设置 Configuration本地运行123$ hexo clean # 删除缓存$ hexo g # 生成Hexo页面$ hexo s # 本地部署Hexo页面 远程运行123$ hexo clean # 删除缓存$ hexo g # 生成Hexo页面$ hexo d # 远程部署Hexo页面 基本配置/_config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: LotteWong's Blog # 个人博客主标题subtitle: 在代码符号表象中避难。 # 个人博客副标题description: # 搜索引擎描述词keywords: # 搜索引擎关键词author: LotteWong # 作者名称avatar: ./public/images/avatar.png # 作者头像language: en # 网站语言timezone: Asia/Shanghai # 网站时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://lottewong.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: source # 文章目录public_dir: public # 素材目录tag_dir: tags # 标签目录archive_dir: archives # 归档目录category_dir: categories # 分类目录code_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/plugins: # 设置个人博客插件theme: icarus # 设置个人博客主题# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git # 部署类型 repo: git@github.com:LotteWong/lottewong.github.io.git # 部署仓库 branch: master # 部署分支 个性选项 Customization基本配置/themes/icarus/_config.yml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225# Version of the Icarus theme that is currently usedversion: 2.3.0# Path or URL to the website's iconfavicon: /images/favicon.ico# Path or URL to RSS atom.xmlrss: ./atom.xml# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.png# Open Graph metadata# https://hexo.io/docs/helpers.html#open-graphopen_graph: # Facebook App ID # fb_app_id: # Facebook Admin ID # fb_admins: # Twitter ID # twitter_id: # Twitter site # twitter_site: # Google+ profile link # google_plus: # Navigation bar link settings 顶部栏设置navbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /about # Navigation bar links to be shown on the right links: Email: icon: far fa-envelope-open url: mailto:lottewong21@gmail.com# Footer section link settings 页尾栏设置footer: # Links to be shown on the right of the footer section links: GitHub: icon: fab fa-github url: 'https://github.com/LotteWong' RSS: icon: fas fa-rss url: /atom.xml# Sidebar settings. 侧边栏设置# Please be noted that a sidebar is only visible when it has at least one widgetsidebar: # left sidebar settings left: # Whether the left sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false # right sidebar settings right: # Whether the right sidebar is sticky when page scrolls # https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/make-a-sidebar-sticky-when-page-scrolls/ sticky: false# Sidebar widget settings 侧边栏设置# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: LotteWong # Title of the author to be shown in the profile widget author_title: SCUT, Undergraduate # Author's current location to be shown in the profile widget location: Guangzhou, China # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/LotteWong' # Links to be shown on the bottom of the profile widget social_links: Organization: icon: fas fa-sitemap url: 'https://github.com/SCUTMSC' Project: icon: fas fa-project-diagram url: 'https://github.com/scutse-man-month-myth/InkYear' - # Widget name type: toc # Where should the widget be placed, left or right position: left - # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Bokjan: 'https://bokjan.com/' Kingsley: 'https://kingsleyxie.cn/' sticnarf: 'https://sticnarf.me/' ahalims: 'https://ahalims.github.io/' xcw: 'https://yifanyu123.github.io/' - # Widget name type: archive # Where should the widget be placed, left or right position: left - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left - # Widget name type: recent_posts # Where should the widget be placed, left or right position: right - # Widget name type: category # Where should the widget be placed, left or right position: right - # Widget name type: tag # Where should the widget be placed, left or right position: right# Article display settingsarticle: highlight: atom-one-light # Code highlight theme # https://github.com/highlightjs/highlight.js/tree/master/src/styles # theme: atom-one-light # Show code copying button # clipboard: true # Default folding status of the code blocks. Can be \"\", \"folded\", \"unfolded\" # fold: unfolded # Whether to show article thumbnail images thumbnail: true # Whether to show estimate article reading time readtime: true# Search plugin settings 搜索功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Searchsearch: # Name of the search plugin type: insight# Comment plugin settings 评论功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Commentcomment: # Name of the comment plugin type: # Donation entries 打赏功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: # - # Donation entry name # type: alipay # Qrcode image URL # qrcode: '/images/alipay.png' # - # Donation entry name # type: wechat # Qrcode image URL # qrcode: '/images/wechat.png' # - # Donation entry name # type: paypal # Paypal business ID or email address # business: 'SuperGsama@outlook.com' # Currency code # currency_code: USD# Share plugin settings 分享功能插件# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name type: # Other plugin settingsplugins: # Enable page animations animejs: true # Enable the lightGallery and Justified Gallery plugins # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/gallery-plugin/ gallery: true # Enable the Outdated Browser plugin # http://outdatedbrowser.com/ outdated-browser: true # Enable the MathJax plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/mathjax-plugin/ mathjax: true # Show the back to top button on mobile devices back-to-top: true # Google Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Google-Analytics google-analytics: # Google Analytics tracking id tracking_id: # Baidu Analytics plugin settings # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Baidu-Analytics baidu-analytics: # Baidu Analytics tracking id tracking_id: # Hotjar user feedback plugin # https://ppoffice.github.io/hexo-theme-icarus/Plugins/General/site-analytics-plugin/#Hotjar hotjar: # Hotjar site id site_id: # Show a loading progress bar at top of the page progressbar: true # Show the copy button in the highlighted code area clipboard: true # BuSuanZi site/page view counter # https://busuanzi.ibruce.info busuanzi: true# CDN provider settings# https://ppoffice.github.io/hexo-theme-icarus/Configuration/Theme/speed-up-your-site-with-custom-cdn/providers: # Name or URL of the JavaScript and/or stylesheet CDN provider cdn: jsdelivr # Name or URL of the webfont CDN provider fontcdn: google # Name or URL of the webfont Icon CDN provider iconcdn: fontawesome 博客写作 Writing 默认 1$ hexo new \"blog title\" 自定义 1234567891011121314151617181920title: {{ blog title }}categories: {{ blog category }}tags:- {{ blog tag }}date: {{ YYYY-MM-DD HH:MM:SS }}thumbnail: {{ blog thumbnail }}{{ Abstract }}---&lt;!-- more --&gt;&lt;!-- toc --&gt;---{{ Content }}--- 博客备份 Backup Hexo备份: 12# master branch$ hexo d Code备份: 12345# dev branch$ git checkout dev$ git add --all$ git commit -m \"new blog\"$ git push origin dev 待办事项 Todos 对应图标 更多插件 绑定域名 更新外链","link":"/2019/06/02/从零到壹：GitHub Pages + Hexo = Blog/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Fiddler","slug":"Fiddler","link":"/tags/Fiddler/"},{"name":"Curl","slug":"Curl","link":"/tags/Curl/"},{"name":"Socket","slug":"Socket","link":"/tags/Socket/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"GitHub Pages","slug":"GitHub-Pages","link":"/tags/GitHub-Pages/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"}],"categories":[{"name":"Operation","slug":"Operation","link":"/categories/Operation/"},{"name":"Sucks","slug":"Sucks","link":"/categories/Sucks/"},{"name":"Testing","slug":"Testing","link":"/categories/Testing/"},{"name":"Cloud Computing","slug":"Cloud-Computing","link":"/categories/Cloud-Computing/"},{"name":"Configuration","slug":"Configuration","link":"/categories/Configuration/"}]}